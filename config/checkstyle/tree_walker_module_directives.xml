<!-- to enable @SuppressWarnings -->
<module name="SuppressWarningsHolder"/>

<module name="ArrayTypeStyle"/>
<module name="AvoidStarImport"/>
<module name="ConstantName">
    <property name="format" value="^((.+C|c)ache|(.+I|i)nstance|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*)$"/>
</module>
<module name="CovariantEquals"/>
<module name="DefaultComesLast"/>
<module name="EmptyBlock">
    <property name="option" value="TEXT"/>
    <property name="tokens"
              value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
</module>
<module name="EmptyStatement"/>
<module name="EqualsHashCode"/>
<module name="FallThrough"/>
<module name="FinalClass"/>
<module name="HiddenField">
    <property name="ignoreConstructorParameter" value="true"/>
</module>
<module name="HideUtilityClassConstructor"/>
<module name="IllegalCatch"/>
<module name="IllegalImport">
    <!-- Avoid mutable collections; if really needed, qualify their class names explicitly. -->
    <property name="illegalClasses" value="java.util.Deque, java.util.List, java.util.Map, java.util.Queue, java.util.Set, java.util.Stack, java.util.Vector"/>
    <!-- Use string interpolation instead (com.antkorwin:better-strings). -->
    <property name="illegalClasses" value="java.text.MessageFormat"/>
    <!-- Use io.vavr.control.Option instead. -->
    <property name="illegalClasses" value="java.util.Optional"/>
    <!-- Use org.checkerframework.checker.nullness.qual.Nullable instead. -->
    <property name="illegalClasses" value="javax.annotation.Nonnull, javax.annotation.Nullable"/>
    <property name="illegalClasses" value="org.jetbrains.annotations.NotNull, org.jetbrains.annotations.Nullable"/>
</module>
<module name="IllegalThrows"/>
<module name="IllegalType"/>
<module name="InnerAssignment"/>
<module name="LeftCurly">
    <property name="tokens"
              value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT"/>
</module>
<module name="MissingSwitchDefault"/>
<module name="MultipleStringLiterals">
    <property name="allowedDuplicates" value="3"/>
</module>
<module name="MultipleVariableDeclarations"/>
<module name="ModifiedControlVariable"/>
<module name="ModifierOrder"/>
<module name="MutableException"/>
<module name="NeedBraces">
    <property name="tokens"
              value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
</module>
<module name="NestedTryDepth"/>
<module name="NoWhitespaceAfter"/>
<module name="NoWhitespaceBefore"/>
<module name="OneStatementPerLine"/>
<module name="PackageDeclaration"/>
<module name="ParameterAssignment"/>
<module name="RedundantModifier"/>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\b(class|interface) [A-Za-z0-9]*Manager\b"/>
    <property name="message" value="Classes called '...Manager' are an indicator of poor design; likely a redesign (and not just a rename) is needed"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="(?&lt;!Error) extends [A-Za-z0-9]*Error\b"/>
    <property name="message" value="Classes extending errors must have the 'Error' suffix"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="(?&lt;!Exception) extends [A-Za-z0-9]*Exception\b"/>
    <property name="message" value="Classes extending exceptions must have the 'Exception' suffix"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bextends AnAction implements DumbAware\b"/>
    <property name="message" value="Use 'extends DumbAwareAction' instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bgetRequiredData\b"/>
    <property name="message" value="Usage of prohibited AnActionEvent#getRequiredData, use AnActionEvent#getData and a @NonNull type-parameterized DataKey instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="(^|[^@])\binterface\s+[^I]"/>
    <property name="message" value="Interface names must start with 'I'"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bjava\.util\.Date\b"/>
    <property name="message" value="Usage of the prohibited and deprecated java.util.Date. Please use java.time.Instant instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value=" LOG = "/>
    <property name="message" value="Do not declare LOG field manually, use @lombok.CustomLog instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\\n"/>
    <property name="message" value="Usage of \n is forbidden, use System.lineSeparator() instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bnCopies\b"/>
    <property name="message" value="Usage of the prohibited Java Collections.nCopies"/>
</module>
<!-- io.vavr.collection.Traversable#peek and java.util.stream.Stream#peek
    unexpectedly differ in their behaviour - peek from vavr calls given method/lambda
    only for the first element in collection/stream - unlike `peek` from Java `Stream` that does this for every element.
    To avoid possible bugs, invocation of any method called "peek" is forbidden. -->
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bpeek\b"/>
    <property name="message" value="peek is inconsistent b/w Vavr and Java, use map or forEach instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bprintln\b"/>
    <property name="message" value="println should not be invoked in production code"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bString\.format\b"/>
    <property name="message" value="Use string interpolation instead (com.antkorwin:better-strings)"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bSwingUtilities\.invokeLater\b"/>
    <property name="message" value="Use GuiUtils.invokeLaterIfNeeded(...) instead, see docs for com.intellij.openapi.application.ModalityState for the reason"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bsynchronized\b"/>
    <property name="message" value="Avoid lock-based synchronization, consider io.vavr.Lazy, Task.Backgroundable and/or GuiUtils.invokeLaterIfNeeded(...) instead"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <!-- (?<!... ) is a negative lookbehind -->
    <property name="format" value="^.*(?&lt;!@Unique |@NonLeaked |import org\.eclipse\.jgit\.revwalk\.)\bRevCommit\b"/>
    <property name="message" value="RevCommit is mutable and thus unsafe when leaked; always mark RevCommits as @org.checkerframework.common.aliasing.qual.Unique"/>
</module>
<module name="Regexp">
    <property name="illegalPattern" value="true"/>
    <property name="ignoreComments" value="true"/>
    <property name="format" value="\bupdateUI\b"/>
    <property name="message" value="Probably unintended updateUI() usage. See docs and consider repaint() and revalidate()"/>
</module>
<module name="RightCurly">
    <property name="id" value="RightCurlySame"/>
    <property name="tokens"
              value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
</module>
<module name="StringLiteralEquality"/>
<module name="SuperClone"/>
<module name="UnnecessaryParentheses"/>
<module name="UnusedImports"/>
<module name="UpperEll"/>

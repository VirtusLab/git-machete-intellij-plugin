
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.common.aliasing.qual.NonLeaked;
import org.checkerframework.common.aliasing.qual.Unique;
import org.checkerframework.common.value.qual.ArrayLen;

package org.eclipse.jgit.lib;

class AnyObjectId {
  @ArrayLen(40) String getName();
}

class Config {
  String getString(final String section, @Nullable String subsection, final String name);
}

package org.eclipse.jgit.revwalk;

class RevWalk {
  void markStart(@NonLeaked RevCommit c);

  // - - - IMPORTANT NOTE - - -
  // Bear in mind that RevCommit is a mutable object.
  // Its internal state (inDegree, flags) changes during a rev walk (among others).
  // To avoid potential bugs:
  // - reinstantiate instead of reuse; this method provides a "clean" instance based on the given String revision
  // - narrow the scope where a RevCommit is available; a use as a field is strongly discouraged.
  // This comment applies everywhere in the codebase.
  // Note that both points are kind-of enforced by Checkstyle (every occurrence of "RevCommit" must be preceded with Checker's @Unique annotation),
  // but this is not perfect - for instance, it doesn't catch RevCommits declared as `var`s.
  @Nullable @Unique RevCommit next();

  @NonNull @Unique RevCommit parseCommit(org.eclipse.jgit.lib.AnyObjectId id);
}

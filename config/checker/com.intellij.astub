import org.checkerframework.checker.guieffect.qual.AlwaysSafe;
import org.checkerframework.checker.guieffect.qual.SafeEffect;
import org.checkerframework.checker.guieffect.qual.UI;
import org.checkerframework.checker.guieffect.qual.UIEffect;
import org.checkerframework.checker.guieffect.qual.UIPackage;
import org.checkerframework.checker.index.qual.NonNegative;
import org.checkerframework.checker.initialization.qual.UnknownInitialization;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.checker.tainting.qual.Tainted;
import org.checkerframework.checker.tainting.qual.Untainted;


@UIPackage package com.intellij.application.options;

@AlwaysSafe
class CodeStyle {}


@UIPackage package com.intellij.build;
@UIPackage package com.intellij.codeHighlighting;
@UIPackage package com.intellij.codeInsight.daemon;
@UIPackage package com.intellij.codeInsight.generation;
@UIPackage package com.intellij.codeInsight.hint;
@UIPackage package com.intellij.codeInsight.hints;
@UIPackage package com.intellij.codeInsight.hints.settings;
@UIPackage package com.intellij.codeInsight.lookup;

class LookupElementBuilder {
  @SafeEffect
  LookupElementBuilder create(String lookupString);
}

@UIPackage package com.intellij.codeInsight.preview;
@UIPackage package com.intellij.codeInspection;
@UIPackage package com.intellij.codeInspection.ex;
@UIPackage package com.intellij.codeInspection.reference;
@UIPackage package com.intellij.codeInspection.ui;
@UIPackage package com.intellij.diagnostic.logging;
@UIPackage package com.intellij.diff;
@UIPackage package com.intellij.diff.merge;
@UIPackage package com.intellij.diff.requests;
@UIPackage package com.intellij.diff.util;


package com.intellij.diff.tools.util.base;

class TextDiffViewerUtil {
  class ComboBoxSettingAction<T> {
    @UIEffect
    void update(AnActionEvent e);
  }
}


@UIPackage package com.intellij.dvcs.push;

class PushController {
  @SafeEffect
  PrePushHandler.Result executeHandlers(ProgressIndicator indicator);

  @SafeEffect
  void push(boolean force);

  class HandlerException {
    @SafeEffect
    String getFailedHandlerName();

    @SafeEffect
    List<String> getSkippedHandlers();
  }
};

@UIPackage package com.intellij.dvcs.push.ui;
@UIPackage package com.intellij.execution;
@UIPackage package com.intellij.execution.configurations;
@UIPackage package com.intellij.execution.dashboard;
@UIPackage package com.intellij.execution.executors;
@UIPackage package com.intellij.execution.runners;
@UIPackage package com.intellij.execution.services;
@UIPackage package com.intellij.execution.testframework;
@UIPackage package com.intellij.execution.ui;
@UIPackage package com.intellij.execution.ui.layout;
@UIPackage package com.intellij.execution.util;
@UIPackage package com.intellij.facet;
@UIPackage package com.intellij.facet.frameworks.ui;
@UIPackage package com.intellij.facet.ui;
@UIPackage package com.intellij.framework;
@UIPackage package com.intellij.ide;

class DataManager {

  @SafeEffect
  static DataManager getInstance();

  @SafeEffect
  DataContext getDataContext(Component component);
}

@UIPackage package com.intellij.ide.actions;
@UIPackage package com.intellij.ide.actions.exclusion;
@UIPackage package com.intellij.ide.actions.searcheverywhere;
@UIPackage package com.intellij.ide.browsers;
@UIPackage package com.intellij.ide.browsers.chrome;
@UIPackage package com.intellij.ide.browsers.firefox;
@UIPackage package com.intellij.ide.diff;
@UIPackage package com.intellij.ide.dnd;
@UIPackage package com.intellij.ide.errorTreeView;
@UIPackage package com.intellij.ide.fileTemplates;
@UIPackage package com.intellij.ide.hierarchy;
@UIPackage package com.intellij.ide.highlighter;
@UIPackage package com.intellij.ide.presentation;
@UIPackage package com.intellij.ide.projectView;
@UIPackage package com.intellij.ide.scratch;
@UIPackage package com.intellij.ide.structureView;
@UIPackage package com.intellij.ide.ui;
@UIPackage package com.intellij.ide.ui.search;
@UIPackage package com.intellij.ide.util;
@UIPackage package com.intellij.ide.util.frameworkSupport;
@UIPackage package com.intellij.ide.util.gotoByName;
@UIPackage package com.intellij.ide.util.projectWizard;
@UIPackage package com.intellij.ide.util.treeView;
@UIPackage package com.intellij.ide.util.treeView.smartTree;
@UIPackage package com.intellij.ide.wizard;

package com.intellij.lang.annotation;

interface AnnotationHolder {
  default AnnotationBuilder newAnnotation( HighlightSeverity severity, @Untainted String message);
}


@UIPackage package com.intellij.navigation;

package com.intellij.notification;


class NotificationAction {
  // Experiments show that notification actions are executed on UI thread.
  static NotificationAction createSimple(Supplier<String> dynamicText, @UI Runnable performAction);

  static NotificationAction createSimple(String text, @UI Runnable performAction);
}

class NotificationGroup {
  Notification createNotification(@Tainted String title, @Tainted String content, NotificationType type, @Nullable NotificationListener listener);

  Notification createNotification(@Tainted String title, @Tainted String content, NotificationType type);
}


@UIPackage package com.intellij.openapi;


@UIPackage package com.intellij.openapi.actionSystem;

class Presentation {
  void setDescription(@Untainted String description);
}

class AnAction {
  @SafeEffect
  AnAction();

  // We can safely mark `actionPerformed` and `update` as `@UIEffect` (the default since we're in a `@UIPackage`)
  // since IntelliJ platform indeed always invokes them on the dispatch thread.
}

class AnActionEvent {

  @SafeEffect
  static AnActionEvent createFromDataContext(String place, Presentation presentation, DataContext dataContext);

  @SafeEffect
  <T> T getData(DataKey<T> key);

  @SafeEffect
  @Nullable Project getProject();

  @SafeEffect
  String getPlace();
}

class DataKey<T> {
  @SafeEffect
  String getName();
}

class ToggleAction {
  @SafeEffect
  ToggleAction();

  // We can safely mark `isSelected` and `setSelected` as `@UIEffect` (the default since we're in a `@UIPackage`)
  // since IntelliJ platform indeed always invokes them on the dispatch thread.
}

@UIPackage package com.intellij.openapi.actionSystem.ex;


package com.intellij.openapi.application;

interface Application {
  void invokeLater(@UI Runnable runnable);
}


@UIPackage package com.intellij.openapi.diff;
@UIPackage package com.intellij.openapi.editor;
@UIPackage package com.intellij.openapi.editor.colors;
@UIPackage package com.intellij.openapi.fileChooser;
@UIPackage package com.intellij.openapi.fileEditor;


package com.intellij.openapi.fileTypes.ex;

@UI
class FileTypeChooser {}


package com.intellij.openapi.fileTypes.impl;

@UI
class FileTypeConfigurable {}

@UI
class FileTypePatternDialog {}

@UI
class FileTypeRenderer {}


@AlwaysSafe
class LanguageFileType {}

@UIPackage package com.intellij.openapi.keymap;
@UIPackage package com.intellij.openapi.module;

@UIPackage package com.intellij.openapi.options;

interface Scheme {
  @SafeEffect
  String getName();
}


@UIPackage package com.intellij.openapi.options.colors;
@UIPackage package com.intellij.openapi.paths;

package com.intellij.openapi.progress;

interface ProgressIndicator {
  void setText(@Untainted String text);
}

class Task {
  @UIEffect
  void onCancel();

  @UIEffect
  void onFinished();

  @UIEffect
  void onThrowable(Throwable error);

  @UIEffect
  void onSuccess();
}

package com.intellij.openapi.project;

@UI class DumbAwareToggleAction {}
@UI class DumbService {}
@UI class DumbUnawareHider {}
@UI class ProjectUtil {}


@UIPackage package com.intellij.openapi.projectRoots;
@UIPackage package com.intellij.openapi.projectRoots.impl;
@UIPackage package com.intellij.openapi.projectRoots.ui;
@UIPackage package com.intellij.openapi.rd;
@UIPackage package com.intellij.openapi.roots.ui;
@UIPackage package com.intellij.openapi.roots.ui.configuration.libraryEditor;
@UIPackage package com.intellij.openapi.roots.ui.util;
@UIPackage package com.intellij.openapi.startup;
@UIPackage package com.intellij.openapi.ui;

class DialogWrapper {
  // `this` in the below method is @UnknownInitialization since this methods is called from DialogWrapper's c'tor
  @Nullable javax.swing.JRootPane getRootPane(@UnknownInitialization DialogWrapper this);

  void setOKButtonText(@Tainted String text);
}

class MessageDialogBuilder<T extends MessageDialogBuilder> {
  @SafeEffect
  YesNo yesNo(@Tainted String title, @Tainted String message);
}

class MessageUtil {
  int showOkCancelDialog(@Tainted String title, @Tainted String message, @Tainted String okText, @Tainted String cancelText,
                           Icon icon, DoNotAskOption doNotAskOption, Project project);
}


@UIPackage package com.intellij.openapi.ui.cellvalidators;
@UIPackage package com.intellij.openapi.ui.dialogs;
@UIPackage package com.intellij.openapi.ui.messages;
@UIPackage package com.intellij.openapi.ui.panel;
@UIPackage package com.intellij.openapi.ui.popup;
@UIPackage package com.intellij.openapi.ui.popup.util;


package com.intellij.openapi.vcs;

@UI class CheckinProjectPanel {}

class VcsNotifier {
  Notification notifyError(@Nullable String displayId, @Tainted String title, @Tainted String message);
  Notification notifySuccess(@Nullable String displayId, @Tainted String title, @Tainted String message);
  Notification notifyWeakError(@Nullable String displayId, @Tainted String title, @Tainted String message);
  Notification notifyWarning(@Nullable String displayId, @Tainted String title, @Tainted String message);
  Notification notifyInfo(@Nullable String displayId, @Tainted String title, @Tainted String message);
}


package com.intellij.openapi.vcs.changes;

@UI class ChangelistBuilder {}
@UI class CommitSession {}
@UI class EmptyChangelistBuilder {}
@UI class LocallyDeletedChange {}


package com.intellij.openapi.vcs.changes.committed;

@UI class ChangeListFilteringStrategy {}
@UI class CommittedChangeListDecorator {}


@UIPackage package com.intellij.openapi.vcs.changes.ui;


package com.intellij.openapi.vcs.history;

@UI class VcsDependentHistoryComponents {}
@UI class VcsHistoryProvider {}


@UIPackage package com.intellij.openapi.vcs.ui;
@UIPackage package com.intellij.openapi.vcs.ui.cloneDialog;
@UIPackage package com.intellij.openapi.vcs.versionBrowser;


package com.intellij.openapi.vfs;

class VirtualFile {
  @Nullable VirtualFile getParent();
}

package com.intellij.openapi.vfs.newvfs;

interface BulkFileListener {
  @UIEffect
  void before(List<? extends VFileEvent> events);

  @UIEffect
  void after(List<? extends VFileEvent> events);
}

@UIPackage package com.intellij.openapi.wm;

interface ToolWindow {
  void activate(@Nullable @UI Runnable runnable);

  @SafeEffect
  @Nullable ContentManager getContentManagerIfCreated();
}

class ToolWindowManager {
  @SafeEffect
  ToolWindowManager getInstance(com.intellij.openapi.project.Project project);

  @SafeEffect
  @Nullable ToolWindow getToolWindow(String id);
}


package com.intellij.platform;

@UI class ProjectTemplate {}


package com.intellij.pom;

@UI class PomIconProvider {}


package com.intellij.projectImport;

@UI class ProjectOpenProcessor {}


package com.intellij.psi.codeStyle.arrangement.std;

@UI class ArrangementUiComponent {}


package com.intellij.psi.codeStyle.modifier;

@UI class CodeStyleStatusBarUIContributor {}


package com.intellij.psi.injection;

@UI class Injectable {}


package com.intellij.psi.meta;

@UI class PsiPresentableMetaData {}


package com.intellij.psi.search;

@UI class DelegatingGlobalSearchScope {}
@UI class SearchScope {}
@UI class TodoAttributes {}


package com.intellij.psi.search.scope.packageSet;

@UI class FilteredNamedScope {}
@UI class NamedScope {}
@UI class NamedScopeManager {}
@UI class NamedScopesHolder {}


@UIPackage package com.intellij.refactoring.util;
@UIPackage package com.intellij.remoteServer;
@UIPackage package com.intellij.remoteServer.configuration.deployment;
@UIPackage package com.intellij.remoteServer.runtime.clientLibrary;
@UIPackage package com.intellij.remoteServer.runtime.deployment;
@UIPackage package com.intellij.tasks;
@UIPackage package com.intellij.tasks.config;
@UIPackage package com.intellij.testIntegration;


@UIPackage package com.intellij.ui;

class CollectionComboBoxModel<T> {
  // This method is annotated as `org.jetbrains.annotations.Nullable` already,
  // but for some reason Checker unsoundly assumes that it's `NonNull` instead.
  @SafeEffect
  @Nullable T getSelected();
}

class MutableCollectionComboBoxModel<T> {
  @SafeEffect
  T getSelected();
}

class GuiUtils {
  @SafeEffect
  void invokeLaterIfNeeded(@UI Runnable runnable, ModalityState modalityState);

  @SafeEffect
  void invokeLaterIfNeeded(@UI Runnable runnable, ModalityState modalityState, Condition expired);
}

class TextFieldWithAutoCompletionListProvider<T> {
  @SafeEffect
  String getCompletionPrefix(CompletionParameters parameters);
}


@UIPackage package com.intellij.ui.border;
@UIPackage package com.intellij.ui.breadcrumbs;
@UIPackage package com.intellij.ui.components;
@UIPackage package com.intellij.ui.components.breadcrumbs;
@UIPackage package com.intellij.ui.components.editors;
@UIPackage package com.intellij.ui.components.fields;
@UIPackage package com.intellij.ui.components.fields.valueEditors;
@UIPackage package com.intellij.ui.components.labels;
@UIPackage package com.intellij.ui.components.panels;
@UIPackage package com.intellij.ui.content;

interface Content {
  @SafeEffect
  String getDisplayName();
}

interface ContentManager {
  @SafeEffect
  @Nullable Content findContent(String displayName);

  @SafeEffect
  @Nullable Content getSelectedContent();
}

@AlwaysSafe
class ContentManagerEvent {}


@UIPackage package com.intellij.ui.docking;
@UIPackage package com.intellij.ui.dualView;
@UIPackage package com.intellij.ui.list;
@UIPackage package com.intellij.ui.mac;
@UIPackage package com.intellij.ui.messager;
@UIPackage package com.intellij.ui.navigation;
@UIPackage package com.intellij.ui.paint;
@UIPackage package com.intellij.ui.popup;
@UIPackage package com.intellij.ui.popup.util;
@UIPackage package com.intellij.ui.roots;
@UIPackage package com.intellij.ui.speedSearch;
@UIPackage package com.intellij.ui.switcher;
@UIPackage package com.intellij.ui.table;
@UIPackage package com.intellij.ui.tabs;
@UIPackage package com.intellij.ui.tabs.impl;
@UIPackage package com.intellij.ui.tabs.impl.singleRow;
@UIPackage package com.intellij.ui.tree;
@UIPackage package com.intellij.ui.treeStructure;
@UIPackage package com.intellij.ui.treeStructure.actions;
@UIPackage package com.intellij.ui.treeStructure.filtered;
@UIPackage package com.intellij.ui.treeStructure.treetable;


@UIPackage package com.intellij.usages;
@UIPackage package com.intellij.usages.impl;
@UIPackage package com.intellij.usages.impl.rules;
@UIPackage package com.intellij.usageView;


package com.intellij.util;

@UI class Alarm {}
@UI class ContentsUtil {}
@UI class EditSourceOnDoubleClickHandler {}
@UI class EditSourceOnEnterKeyHandler {}

class ModalityUiUtil {
  @SafeEffect
  void invokeLaterIfNeeded(ModalityState modalityState, @UI Runnable runnable);

  @SafeEffect
  void invokeLaterIfNeeded(ModalityState modalityState, Condition expired, @UI Runnable runnable);
}


@UI class PlatformIcons {}
@UI class PsiIconUtil {}


package com.intellij.util.config;

@UI class DumbAwareToggleBooleanProperty {}
@UI class DumbAwareToggleInvertedBooleanProperty {}
@UI class ToggleBooleanProperty {}
@UI class ToggleInvertedBooleanProperty {}


package com.intellij.util.download;

@UI class DownloadableFileService {}
@UI class FileDownloader {}


package com.intellij.util.messages;

interface SimpleMessageBusConnection {
  <L> void subscribe(Topic<L> topic, @UI L handler);
}


package com.intellij.util.net;

@UI class AuthenticationDialog {}
@UI class AuthenticationPanel {}
@UI class HttpConfigurable {}
@UI class HttpProxySettingsUi {}
@UI class IOExceptionDialog {}


package com.intellij.util.net.ssl;

@UI class CertificateConfigurable {}
@UI class CertificateInfoPanel {}
@UI class CertificateWarningDialog {}


@UIPackage package com.intellij.util.ui;

class UIUtil {
  @SafeEffect
  Color getInactiveTextColor();
}


@UIPackage package com.intellij.util.ui.tree;
@UIPackage package com.intellij.util.ui.update;

package com.intellij.vcs.log.graph.api.elements;

class GraphEdge {
  GraphEdge(@NonNegative Integer upNodeIndex, @NonNegative Integer downNodeIndex, @Nullable Integer targetId, GraphEdgeType type);

  GraphEdge createNormalEdge(@NonNegative int nodeIndex1, @NonNegative int nodeIndex2, GraphEdgeType type);
}

@UIPackage package com.intellij.vcs.log.paint;
@UIPackage package com.intellij.vcs.log.ui.render;
@UIPackage package com.intellij.vcsUtil;
@UIPackage package com.intellij.xdebugger;
@UIPackage package com.intellij.xdebugger.breakpoints;
@UIPackage package com.intellij.xdebugger.breakpoints.ui;
@UIPackage package com.intellij.xdebugger.frame;
@UIPackage package com.intellij.xdebugger.stepping;
@UIPackage package com.intellij.xml.breadcrumbs;

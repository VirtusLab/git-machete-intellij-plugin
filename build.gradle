plugins {
  id 'org.gradle.checkstyle'
  id 'org.gradle.java-library'

  id 'com.github.ben-manes.versions' version '0.29.0'

  id 'com.diffplug.spotless' version '5.1.0' apply false
  id 'io.freefair.lombok' version '5.1.0' apply false
  id 'org.ajoberstar.grgit' version '4.0.2' apply false
  id 'org.checkerframework' version '0.5.7' apply false
  id 'org.jetbrains.grammarkit' version '2020.2.1' apply false
  id 'org.jetbrains.intellij' version '0.4.21' apply false
  id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
  id 'se.bjurr.violations.violations-gradle-plugin' version '1.41' apply false
}

ext {
  // Update the range of UI-tested versions in .circle/config.yml when any of the below is updated
  intellijVersions = [
    earliestSupported: '2020.1',
    // An arbitrary list of versions between earliest supported (excl.) and current (excl.), for binary compatibility checks
    inBetweenForCompatibilityChecks: ['2020.1.2'],
    current: '2020.2',
  ]
  intellijVersions.buildTarget = intellijVersions.current
  intellijVersions.runIdeTarget = project.properties.intellijVersionForRunIde ?: intellijVersions.buildTarget

  betterStringsVersion = '0.5'
  checkerFrameworkVersion = '3.5.0'
  checkstyleToolVersion = '8.33'
  jetbrainsAnnotationsVersion = '19.0.0'
  jgitVersion = '5.8.1.202007141445-r'
  junitVersion = '4.13'
  kotlinStdlibVersion = '1.3.72'
  lombokVersion = '1.18.12'
  powerMockVersion = '2.0.7'
  reflectionsVersion = '0.9.12'
  remoteRobotVersion = '0.9.35'
  slf4jLambdaApiVersion = '0.1'
  slf4jVersion = '1.7.30'
  vavrVersion = '0.10.3'

  ciBranch = System.getenv('CIRCLE_BRANCH')
  isCI = System.getenv('CI') == 'true'
  jetbrainsMarketplaceToken = System.getenv('JETBRAINS_MARKETPLACE_TOKEN')

  // This values can't be named in the same way as their corresponding properties to avoid a name clash.
  jvmArgsForJavaCompilation = project.properties.get('compileJavaJvmArgs')?.tokenize(' ')
  shouldRunAllCheckers = isCI || project.hasProperty('runAllCheckers')
  shouldUseDelombok = project.hasProperty('useDelombok')
}

if (isCI) {
  gradle.startParameter.configureOnDemand = false
  gradle.startParameter.logLevel = LogLevel.INFO
  gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS
}

dependencyUpdates {
  def isStableVersion = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return stableKeyword || version ==~ regex
  }

  rejectVersionIf {
    !isStableVersion(it.candidate.version)
  }
}

allprojects {
  repositories {
    jcenter()
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'org.gradle.java-library'
  sourceCompatibility = 11

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs += [
        '-Werror', // Treat each compiler warning (esp. the ones coming from Checker Framework) as an error.
        '-Xlint:unchecked', // Warn of type-unsafe operations on generics.
      ]
      options.forkOptions.jvmArgs += jvmArgsForJavaCompilation ?: (isCI ? [] : ['-Xmx6g', '-XX:+HeapDumpOnOutOfMemoryError'])
    }

    tasks.withType(Javadoc) {
      // See JDK-8200363 (https://bugs.openjdk.java.net/browse/JDK-8200363) for information about the `-Xwerror` option:
      // this is needed to make sure that javadoc always fails on warnings
      // (esp. important on CI since javadoc there for some reason seems to never raise any errors otherwise).

      // The '-quiet' as second argument is actually a hack around https://github.com/gradle/gradle/issues/2354:
      // since the one-parameter `addStringOption` doesn't seem to work, we need to add an extra `-quiet`, which is added anyway by Gradle.
      options.addStringOption('Xwerror', '-quiet')
      options.addStringOption('Xdoclint:all', '-quiet')
    }
  }


  apply plugin: 'org.checkerframework'
  checkerFramework {
    excludeTests = true
    checkers = [
      'org.checkerframework.checker.nullness.NullnessChecker',
    ]
    if (shouldRunAllCheckers) {
      // The experience shows that the below checkers are just rarely failing, as compared to GuiEffect/Nullness.
      // Hence, they're only applied in CI, or locally only if a dedicated Gradle project property is set.
      checkers += [
        'org.checkerframework.checker.fenum.FenumChecker',
        'org.checkerframework.checker.index.IndexChecker',
        'org.checkerframework.checker.interning.InterningChecker',
        'org.checkerframework.checker.optional.OptionalChecker',
      ]
    }
    extraJavacArgs = [
      '-AassumeAssertionsAreEnabled',
      '-AinvariantArrays',
      '-Alint=cast:redundant,cast:unsafe',
      '-ArequirePrefixInWarningSuppressions',
      '-AshowSuppressWarningsStrings',
      "-Astubs=$rootDir/config/checker/",
      '-AsuppressWarnings=allcheckers:type.anno.before.decl.anno,allcheckers:type.anno.before.modifier',
    ]
    dependencies {
      compileOnly      group: 'org.checkerframework', name: 'checker-qual', version: checkerFrameworkVersion
      checkerFramework group: 'org.checkerframework', name: 'checker',      version: checkerFrameworkVersion
    }
  }


  apply plugin: 'com.diffplug.spotless'
  spotless {
    java {
      importOrder 'java', 'javax', '', 'com.virtuslab'
      // See https://github.com/diffplug/spotless/blob/master/ECLIPSE_SCREENSHOTS.md on importing and exporting settings from Eclipse
      eclipse().configFile "$rootDir/config/spotless/formatting-rules.xml"
      removeUnusedImports()
      targetExclude 'build/generated/**/*.*'
    }
    kotlin {
      ktfmt()
    }
  }


  // String interpolation support, see https://github.com/antkorwin/better-strings
  // This needs to be enabled in each subproject by default because there's going to be no warning
  // if this annotation processor isn't run in any subproject (the strings will be just interpreted verbatim, without interpolation applied).
  // We'd only capture that in CI's post-compile checks by analyzing constants in class files.
  dependencies {
    def betterStringsCoords = [ group: 'com.antkorwin', name: 'better-strings', version: betterStringsVersion ]
    annotationProcessor(betterStringsCoords)
    testAnnotationProcessor(betterStringsCoords)
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs += '-AcallToStringExplicitlyInInterpolations'
    }
  }


  apply plugin: 'org.gradle.checkstyle'
  checkstyle {
    toolVersion checkstyleToolVersion

    // ignoreFailures here because we want to set conditions that will cause build fail in violations plugin
    ignoreFailures = false
    checkstyleTest.enabled = false

    // This enables "importing" subconfig files to main file (DTD ENTITY feature)
    System.setProperty('checkstyle.enableExternalDtdLoad', 'true')

    configProperties = [rootCheckstyleConfigDir: "$rootDir/config/checkstyle"]

    def checkstyleRelativeConfigPath = 'config/checkstyle/checkstyle.xml'

    def subprojectConfigFile = new File(projectDir, checkstyleRelativeConfigPath)
    // Check if subproject-specific config file exists. If exists then apply
    if (subprojectConfigFile.isFile()) {
      configFile = subprojectConfigFile
    } else {
      configFile = new File(rootDir, checkstyleRelativeConfigPath)
    }
  }

  apply plugin: 'se.bjurr.violations.violations-gradle-plugin'
  task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
    // Optional config
    maxReporterColumnWidth = 0 // 0 means "no limit"
    maxRuleColumnWidth = 60
    maxSeverityColumnWidth = 0
    maxLineColumnWidth = 0
    maxMessageColumnWidth = 100

    // Global configuration, remove if you don't want to report violations for the entire repo.
    minSeverity = 'WARN' // INFO, WARN or ERROR
    detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
    maxViolations = 0 // Will fail the build if total number of found violations is higher
    printViolations = true // Will print violations found in diff

    // This is mandatory regardless of if you want to report violations between revisions or the entire repo.
    // Many more formats available, see: https://github.com/tomasbjerre/violations-lib
    violations = [
      ['CHECKSTYLE', buildDir.path, '.*/checkstyle/.*\\.xml\$', 'Checkstyle']
    ]
  }

  // Run violations task after each checkstyleMain run
  checkstyleMain.finalizedBy(violations)


  if (shouldUseDelombok) {
    apply plugin: 'io.freefair.lombok'
    lombok {
      version = lombokVersion
      generateLombokConfig.enabled = false
    }
  }


  ext {
    addIntellijToCompileClasspath = { Map params ->
      apply plugin: 'org.jetbrains.intellij'

      // For the frontend subprojects we only use the Intellij plugin to provide dependencies,
      // but don't want the associated tasks to be available; they should only be available in the root project.
      buildPlugin.enabled = false
      buildSearchableOptions.enabled = false
      downloadRobotServerPlugin.enabled = false
      jarSearchableOptions.enabled = false
      patchPluginXml.enabled = false
      prepareSandbox.enabled = false
      prepareTestingSandbox.enabled = false
      prepareUiTestingSandbox.enabled = false
      publishPlugin.enabled = false
      runIde.enabled = false
      runIdeForUiTests.enabled = false
      verifyPlugin.enabled = false

      checkerFramework {
        // Technically, UI thread handling errors can happen outside of the (mostly frontend) modules that depend on IntelliJ,
        // but the risk is minuscule and not worth the extra computational burden in every single build.
        // This might change, however, if/when Checker Framework adds @Heavyweight annotation
        // (https://github.com/typetools/checker-framework/issues/3253).
        checkers += 'org.checkerframework.checker.guieffect.GuiEffectChecker'
      }

      intellij {
        version intellijVersions.buildTarget
        // No need to instrument Java classes with nullability assertions, we've got this covered much better by Checker
        // (and we don't plan to expose any part of the plugin as an API for other plugins).
        instrumentCode false
        if (params.withGit4Idea) {
          plugins 'git4idea'
        }
      }
    }

    applyAliasingChecker = { ->
      if (shouldRunAllCheckers) {
        checkerFramework {
          checkers += 'org.checkerframework.common.aliasing.AliasingChecker'
        }
      }
    }

    applySubtypingChecker = { ->
      if (shouldRunAllCheckers) {
        dependencies {
          checkerFramework project(':qual')
        }
        checkerFramework {
          checkers += 'org.checkerframework.common.subtyping.SubtypingChecker'
          def qualClassDir = project(':qual').sourceSets.main.output.classesDirs.asPath
          extraJavacArgs += "-ASubtypingChecker_qualDirs=${qualClassDir}"
        }
      }
    }

    jetbrainsAnnotations = { ->
      dependencies {
        implementation group: 'org.jetbrains', name: 'annotations', version: jetbrainsAnnotationsVersion
      }
    }

    jgit = { ->
      dependencies {
        implementation (group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: jgitVersion) {
          // JGit transitively pulls in a version of slf4j-api (currently 1.7.2)
          // that's incompatible with the slf4j-api version that IntelliJ depends in (currently 1.7.25).
          // SLF4J guarantees that the code compiled against a certain slf4j-api version will work with any other version of slf4j-api
          // (http://www.slf4j.org/manual.html#compatibility).
          // We rely on that guarantee: JGit that our plugin depends on (via backendImpl and gitCoreJGit)
          // effectively uses whatever slf4j-api version is provided by IntelliJ.
          // SLF4J does NOT guarantee, however, that slf4j-api version X will work with any slf4j implementation version Y for X != Y.
          // To avoid a clash between JGit's slf4j-api and Intellij's slf4j implementation
          // (and also between JGit's slf4j-api and Intellij's slf4j-api), we need to exclude the former.
          exclude(group: 'org.slf4j')
        }
      }
    }

    junit = { ->
      dependencies {
        testImplementation group: 'junit', name: 'junit', version: junitVersion
      }
    }

    lombok = { ->
      // If delombok is turned on, then Lombok is provided for each subproject via Gradle plugin instead.
      // Applying Lombok plugin conditionally from within this `ext` block turned out to be troublesome.
      if (!shouldUseDelombok) {
        dependencies {
          def lombokCoords = [group: 'org.projectlombok', name: 'lombok', version: lombokVersion]
          compileOnly lombokCoords
          annotationProcessor lombokCoords
          testCompileOnly lombokCoords
          testAnnotationProcessor lombokCoords
        }
      }
    }

    powerMock = { ->
      dependencies {
        testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: powerMockVersion
        testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: powerMockVersion
      }
    }

    reflections = { ->
      dependencies {
        implementation group: 'org.reflections', name: 'reflections', version: reflectionsVersion
      }
    }

    remoteRobot = { ->
      repositories {
        maven { url = "https://jetbrains.bintray.com/intellij-third-party-dependencies" }
      }

      dependencies {
        testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinStdlibVersion
        testImplementation group: 'com.intellij.remoterobot', name: 'remote-robot', version: remoteRobotVersion
      }
    }

    slf4jApi = { ->
      dependencies {
        compileOnly group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
      }
    }

    slf4jLambdaApi = { ->
      dependencies {
        slf4jApi()
        // It's so useful for us because we are using invocations of methods that potentially consume some time
        // also in debug messages, but this plugin allows us to use lambdas that generate log messages
        // (mainly using string interpolation plugin) and these lambdas are evaluated only when needed
        // (i.e. when the given log level is active)
        compile(group: 'kr.pe.kwonnam.slf4j-lambda', name: 'slf4j-lambda-core', version: slf4jLambdaApiVersion)  {
          exclude(group: 'org.slf4j')
        }
      }
    }

    slf4jTestImpl = { ->
      // We only need to provide an SLF4J implementation in the contexts which depend on JGit but don't depend on IntelliJ.
      // In our case, that's solely the tests of backendImpl.
      // In other contexts that require an SLF4J implementation (buildPlugin, runIde, possible but not yet present tests of frontend),
      // an SLF4J implementation is pulled in by IntelliJ.
      // Note that we don't need to agree the SLF4J implementation version here with JGit's slf4j-api version
      // since the latter is excluded (see the comment to `jgit` for more nuances).
      // The below dependency provides both slf4j-api and an implementation, both already in the same version (1.7.30 i.e. the current stable).
      dependencies {
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
      }
    }

    vavr = { ->
      dependencies {
        // Unlike any other current dependency, Vavr classes are very likely to end up in binary interface of the depending subproject,
        // hence it's better to just treat Vavr as an `api` and not `implementation` dependency by default.
        api group: 'io.vavr', name: 'vavr', version: vavrVersion
      }
    }
  }
}


// Root project config

// This is necessary to make sure that `buildPlugin` task puts jars of all relevant subprojects into the final zip.
subprojects.each { subproject ->
  // No need to include near-empty (only with META-INF/MANIFEST.MF) jars
  // for subprojects that don't have any production code.
  if (!subproject.sourceSets.main.allSource.srcDirs.findAll { file(it).exists() }.isEmpty()) {
    dependencies {
      implementation(subproject)
    }
  }
}


group 'com.virtuslab'

apply plugin: 'org.ajoberstar.grgit'
apply from: 'version.gradle'

if (ciBranch == 'master') {
  version PROSPECTIVE_RELEASE_VERSION  // more precisely, "soon-to-happen-in-this-pipeline release version" in case of master builds

} else if (!file('.git').exists()) {
  // To make sure it's safe for Docker image builds where .git folder is unavailable
  version "${PROSPECTIVE_RELEASE_VERSION}-SNAPSHOT"

} else {
  def maybeSnapshot = ciBranch == 'develop' ? '' : '-SNAPSHOT'

  def git = org.ajoberstar.grgit.Grgit.open(currentDir: projectDir)
  def lastTag = git.tag.list().sort { it.dateTime }.last()
  def commitsSinceLastTag = grgit.log(includes: ['HEAD'], excludes: [lastTag.fullName])
  def maybeCommitCount = commitsSinceLastTag.empty ? '' : '-' + commitsSinceLastTag.size()
  def shortCommitHash = git.head().abbreviatedId
  def maybeDirty = git.status().clean ? '' : '-dirty'
  git.close()

  version "${PROSPECTIVE_RELEASE_VERSION}${maybeCommitCount}${maybeSnapshot}+git.${shortCommitHash}${maybeDirty}"
}


apply plugin: 'org.jetbrains.intellij'

intellij {
  instrumentCode false
  pluginName 'git-machete-intellij-plugin'
  version intellijVersions.buildTarget
}

static String intellijVersionToBuildNumber(String version) {
  return version.substring(2, 6).replace('.', '')
}

patchPluginXml {
  // `sinceBuild` is exclusive when we are using `*` in version but inclusive when without `*`
  sinceBuild intellijVersionToBuildNumber(intellijVersions.earliestSupported)

  // In `untilBuild` situation is inverted: it's inclusive when using `*` but exclusive when without `*`
  untilBuild intellijVersionToBuildNumber(intellijVersions.current) + '.*'

  changeNotes file("$rootDir/CHANGE-NOTES.html").text
}

apply from: 'plugin-verifier.gradle'

runPluginVerifier {
  pluginFileName = "${intellij.pluginName}-${version}"
  verifierVersion = '1.241'
  ides = [
    intellijVersions.earliestSupported,
    *intellijVersions.inBetweenForCompatibilityChecks,
    intellijVersions.current
  ].collect { 'IC-' + it }
}

repositories {
  maven { url = 'https://www.jetbrains.com/intellij-repository/releases/' }
  maven { url = 'https://www.jetbrains.com/intellij-repository/snapshots/' }
}

File resolveIdeaCommunity(String version) {
  return runPluginVerifier.resolveIde('IC-' + version)
}

runIde {
  maxHeapSize = '2G'

  // gradle-intellij-plugin doesn't have native support for building and running against different IntelliJ versions,
  // hence a little workaround is needed; see https://github.com/JetBrains/gradle-intellij-plugin/issues/450 for details
  if (intellijVersions.runIdeTarget != intellijVersions.buildTarget) {
    ideDirectory resolveIdeaCommunity(intellijVersions.runIdeTarget)
  }
}

runIdeForUiTests {
  maxHeapSize = '2G'

  if (intellijVersions.runIdeTarget != intellijVersions.buildTarget) {
    ideDirectory resolveIdeaCommunity(intellijVersions.runIdeTarget)
  }
}

downloadRobotServerPlugin.version = remoteRobotVersion

publishPlugin {
  token jetbrainsMarketplaceToken
}

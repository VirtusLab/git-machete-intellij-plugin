plugins {
  id 'org.gradle.checkstyle'
  id 'org.gradle.java-library'

  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.ajoberstar.grgit' version '4.0.2'

  id 'com.diffplug.gradle.spotless' version '4.0.0' apply false
  id 'io.freefair.lombok' version '5.1.0' apply false
  id 'org.checkerframework' version '0.5.0' apply false
  id 'org.jetbrains.intellij' version '0.4.21' apply false
  id 'se.bjurr.violations.violations-gradle-plugin' version '1.40' apply false
}

task resolveDependencies {
  doLast {
    project.rootProject.allprojects.each { subProject ->
      subProject.buildscript.configurations.each { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
      subProject.configurations.each { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
    }
  }
}

if (System.getenv('CI') == 'true') {
  gradle.startParameter.configureOnDemand = false
  gradle.startParameter.logLevel = LogLevel.INFO
  gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS
}

dependencyUpdates {
  def isNonStableVersion = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  rejectVersionIf {
    isNonStableVersion(it.candidate.version)
  }
}

allprojects {
  group 'com.virtuslab'

  apply from: "$rootDir/version.gradle"
  def ciBranch = System.getenv('CIRCLE_BRANCH')
  if (ciBranch == 'master') {
    version PLUGIN_VERSION
  } else if (!file("$rootDir/.git").exists()) {
    // To make sure it's safe for Docker image builds where .git folder is unavailable
    version "${PLUGIN_VERSION}-SNAPSHOT"
  } else {
    def maybeSnapshot = ciBranch == 'develop' ? '' : '-SNAPSHOT'

    def git = org.ajoberstar.grgit.Grgit.open(currentDir: rootDir)
    def shortCommitHash = git.head().abbreviatedId
    def maybeDirty = git.status().clean ? '' : '-dirty'
    git.close()

    version "${PLUGIN_VERSION}${maybeSnapshot}+git.${shortCommitHash}${maybeDirty}"
  }

  repositories {
    jcenter()
    mavenCentral()
  }

  ext {
    betterStringsVerson = '0.3'
    checkstyleToolVersion = '8.30'
    ideProbeJunitDriverVersion = '0.1'
    // The following places must also be updated when updating the version below:
    // * `patchPluginXml.untilBuild` in root Gradle project config in this file
    // * `intellij_versions` in scripts/verify-binary-compatibility
    // * range of tested versions in uiTests/src/test/scala/com/virtuslab/gitmachete/uitest/OpenTabActionUiTest.scala
    intellijVersion = '2020.1.1'
    jgitVersion = '5.7.0.202003110725-r'
    junitVersion = '4.13'
    // Only applies when Lombok is used as a regular dependency.
    // Lombok Gradle plugin pulls in its own (apparently non-configurable) Lombok version.
    lombokVersion = '1.18.12'
    powerMockVersion = '2.0.7'
    reflectionsVersion = '0.9.12'
    // Yes, `2` in case of Scala is an "epoch", and `13` is major release
    // (b/c 2.13 is binary incompatible with 2.12, 2.12 incompatible with 2.11 etc.)
    scalaVersionMajor = '2.13'
    scalaVersion = "${scalaVersionMajor}.1"
    slf4jLambdaApiVersion = '0.1'
    slf4jVersion = '1.7.30'
    vavrVersion = '0.10.3'
  }
}

subprojects {
  apply plugin: 'org.gradle.java-library'
  sourceCompatibility = 11

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs += [
        '-Werror', // Treat each compiler warning (esp. the ones coming from Checker Framework) as an error.
        '-Xlint:unchecked', // Warn of type-unsafe operations on generics.
      ]
      if (System.getenv('CI') != 'true') {
        def jvmArgsEnvVar = System.getenv('GRADLE_COMPILE_JAVA_JVM_ARGS')
        options.forkOptions.jvmArgs += jvmArgsEnvVar ? jvmArgsEnvVar.tokenize(' ') : ['-Xmx6g', '-XX:+HeapDumpOnOutOfMemoryError']
      }
    }

    tasks.withType(Javadoc) {
      // See JDK-8200363 (https://bugs.openjdk.java.net/browse/JDK-8200363) for information about the `-Xwerror` option:
      // this is needed to make sure that javadoc always fails on warnings
      // (esp. important on CI since javadoc there for some reason seems to never raise any errors otherwise).

      // The '-quiet' as second argument is actually a hack around https://github.com/gradle/gradle/issues/2354:
      // since the one-parameter `addStringOption` doesn't seem to work, we need to add an extra `-quiet`, which is added anyway by Gradle.
      options.addStringOption('Xwerror', '-quiet')
      options.addStringOption('Xdoclint:all', '-quiet')
      options.addStringOption('encoding', 'UTF-8')
    }
  }


  apply plugin: 'org.checkerframework'
  checkerFramework {
    excludeTests = true
    // See https://github.com/kelloggm/checkerframework-gradle-plugin/issues/85 (and the associated PR #86) for why this flag is needed
    suppressLombokWarnings = false
    checkers = [
      'org.checkerframework.checker.nullness.NullnessChecker',
    ]
    if (System.getenv('CI') == 'true' || System.getenv('RUN_ALL_CHECKERS') == 'true') {
      // The experience shows that the below checkers are just rarely failing (if ever, in case of Regex), as compared to GuiEffect/Nullness.
      // Hence, they're only applied in CI, or locally only if a dedicated variable is present in the env.
      checkers += [
        'org.checkerframework.checker.index.IndexChecker',
        'org.checkerframework.checker.optional.OptionalChecker',
        'org.checkerframework.checker.regex.RegexChecker',
      ]
    }
    extraJavacArgs = [
      '-AassumeAssertionsAreEnabled',
      '-AinvariantArrays',
      '-Alint=cast:redundant,cast:unsafe',
      '-ArequirePrefixInWarningSuppressions',
      '-AshowSuppressWarningKeys',
      "-Astubs=$rootDir/config/checker/",
      '-AsuppressWarnings=all:type.anno.before.decl.anno,all:type.anno.before.modifier',
    ]
  }


  // Lombok support
  // Here comes the tricky part: there's a tradeoff...
  if (System.getenv('LOMBOK_PROVIDED_BY') == 'gradle-plugin') {
    // Plus:  Checker errors caused by Lombok-generated code are correctly reported
    // Minus: some compilation errors (esp. from Checker) and stack traces refer to line numbers from the delomboked source code,
    //        which may differ a lot from the original source
    apply plugin: 'io.freefair.lombok'
    generateLombokConfig.enabled = false
  } else { // For clarity, use 'regular-dependency' for `LOMBOK_PROVIDED_BY`, or skip it completely.
    // Plus:  all compilation errors (esp. from Checker) and stack traces refer to line numbers from the original source code
    // Minus: Checker errors caused by Lombok-generated code are always suppressed,
    //        see https://github.com/kelloggm/checkerframework-gradle-plugin/issues/85 for an example;
    //        the exact mechanics is likely different than in the issue since code generation happens on the fly (via AST transformations),
    //        but the general problem remains the same
    dependencies {
      def lombokArtifact = [group: 'org.projectlombok', name: 'lombok', version: lombokVersion]
      compileOnly lombokArtifact
      annotationProcessor lombokArtifact
      testCompileOnly lombokArtifact
      testAnnotationProcessor lombokArtifact
    }
  }
  // Hopefully that'll be no longer needed if/when the changes requested
  // either on https://github.com/rzwitserloot/lombok/issues/2433 or on https://github.com/typetools/checker-framework/issues/3356
  // are incorporated into Lombok or Checker, respectively.


  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    java {
      importOrder 'java', 'javax', '', 'com.virtuslab'
      // See https://github.com/diffplug/spotless/blob/master/ECLIPSE_SCREENSHOTS.md on importing and exporting settings from Eclipse
      eclipse().configFile "$rootDir/config/spotless/formatting-rules.xml"
      removeUnusedImports()
    }
  }


  // String interpolation support, see https://github.com/antkorwin/better-strings
  // This needs to be enabled in each subproject by default because there's going to be no warning
  // if this annotation processor isn't run in any subproject (the strings will be just interpreted verbatim, without interpolation applied).
  // We'd only capture that in CI's post-compile checks by analyzing constants in class files.
  dependencies {
    def betterStringsArtifact = [ group: 'com.antkorwin', name: 'better-strings', version: betterStringsVerson ]
    annotationProcessor(betterStringsArtifact)
    testAnnotationProcessor(betterStringsArtifact)
  }


  apply plugin: 'org.gradle.checkstyle'
  checkstyle {
    toolVersion checkstyleToolVersion

    // ignoreFailures here because we want to set conditions that will cause build fail in violations plugin
    ignoreFailures = false
    checkstyleTest.enabled = false

    // This enables "importing" subconfig files to main file (DTD ENTITY feature)
    System.setProperty('checkstyle.enableExternalDtdLoad', 'true')

    configProperties = [rootCheckstyleConfigDir: "$rootDir/config/checkstyle"]

    def checkstyleRelativeConfigPath = 'config/checkstyle/checkstyle.xml'

    def subprojectConfigFile = new File(projectDir, checkstyleRelativeConfigPath)
    // Check if subproject-specific config file exists. If exists then apply
    if (subprojectConfigFile.isFile()) {
      configFile = subprojectConfigFile
    } else {
      configFile = new File(rootDir, checkstyleRelativeConfigPath)
    }
  }

  apply plugin: 'se.bjurr.violations.violations-gradle-plugin'
  task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
    // Optional config
    maxReporterColumnWidth = 0 // 0 means "no limit"
    maxRuleColumnWidth = 60
    maxSeverityColumnWidth = 0
    maxLineColumnWidth = 0
    maxMessageColumnWidth = 100

    // Global configuration, remove if you don't want to report violations for the entire repo.
    minSeverity = 'WARN' // INFO, WARN or ERROR
    detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
    maxViolations = 0 // Will fail the build if total number of found violations is higher
    printViolations = true // Will print violations found in diff

    // This is mandatory regardless of if you want to report violations between revisions or the entire repo.
    // Many more formats available, see: https://github.com/tomasbjerre/violations-lib
    violations = [
      ['CHECKSTYLE', buildDir.path, '.*/checkstyle/.*\\.xml\$', 'Checkstyle']
    ]
  }

  // Run violations task after each checkstyleMain run
  checkstyleMain.finalizedBy(violations)


  ext {
    applyAliasingChecker = { ->
      checkerFramework {
        checkers += 'org.checkerframework.common.aliasing.AliasingChecker'
      }
    }

    applyIntellijPlugin = { Map params ->
      apply plugin: 'org.jetbrains.intellij'

      // For the frontend subprojects we only use the Intellij plugin to provide dependencies,
      // but don't want the associated tasks to be available; they should only be available in the root project.
      buildPlugin.enabled = false
      buildSearchableOptions.enabled = false
      downloadRobotServerPlugin.enabled = false
      jarSearchableOptions.enabled = false
      patchPluginXml.enabled = false
      prepareSandbox.enabled = false
      prepareTestingSandbox.enabled = false
      prepareUiTestingSandbox.enabled = false
      publishPlugin.enabled = false
      runIde.enabled = false
      runIdeForUiTests.enabled = false
      verifyPlugin.enabled = false

      checkerFramework {
        // Technically, UI thread handling errors can happen outside of the (mostly frontend) modules that depend on IntelliJ,
        // but the risk is minuscule and not worth the extra computational burden in every single build.
        // This might change, however, if/when Checker Framework adds @Heavyweight annotation
        // (https://github.com/typetools/checker-framework/issues/3253).
        checkers += 'org.checkerframework.checker.guieffect.GuiEffectChecker'
      }

      intellij {
        version intellijVersion
        // No need to instrument Java classes with nullability assertions, we've got this covered much better by Checker
        // (and we don't plan to expose any part of the plugin as an API for other plugins).
        instrumentCode false
        if (params.withGit4Idea) {
          plugins 'git4idea'
        }
      }
    }

    applySubtypingChecker = { ->
      dependencies {
        implementation project(':qual')
        checkerFramework project(':qual')
      }
      checkerFramework {
        checkers += 'org.checkerframework.common.subtyping.SubtypingChecker'
        def qualClassDir = project(':qual').sourceSets.main.output.classesDirs.asPath
        extraJavacArgs += "-AqualDirs=${qualClassDir}"
      }
    }

    ideProbeJunitDriver = { ->
      dependencies {
        testImplementation group: 'com.virtuslab.ideprobe', name: "junit-driver_${scalaVersionMajor}", version: ideProbeJunitDriverVersion
      }
    }

    jgit = { ->
      dependencies {
        implementation (group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: jgitVersion) {
          // JGit transitively pulls in a version of slf4j-api (currently 1.7.2)
          // that's incompatible with the slf4j-api version that IntelliJ depends in (currently 1.7.25).
          // SLF4J guarantees that the code compiled against a certain slf4j-api version will work with any other version of slf4j-api
          // (http://www.slf4j.org/manual.html#compatibility).
          // We rely on that guarantee: JGit that our plugin depends on (via backendImpl and gitCoreJGit)
          // effectively uses whatever slf4j-api version is provided by IntelliJ.
          // SLF4J does NOT guarantee, however, that slf4j-api version X will work with any slf4j implementation version Y for X != Y.
          // To avoid a clash between JGit's slf4j-api and Intellij's slf4j implementation
          // (and also between JGit's slf4j-api and Intellij's slf4j-api), we need to exclude the former.
          exclude(group: 'org.slf4j')
        }
      }
    }

    junit = { ->
      dependencies {
        testImplementation group: 'junit', name: 'junit', version: junitVersion
      }
    }

    powerMock = { ->
      dependencies {
        testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: powerMockVersion
        testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: powerMockVersion
      }
    }

    reflections = { ->
      dependencies {
        implementation group: 'org.reflections', name: 'reflections', version: reflectionsVersion
      }
    }

    scala = { ->
      dependencies {
        compileOnly group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
        testCompileOnly group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
      }
    }

    slf4jApi = { ->
      dependencies {
        compileOnly group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
      }
    }

    slf4jLambdaApi = { ->
      dependencies {
        slf4jApi()
        // It's so useful for us because we are using invocations of methods that potentially consume some time
        // also in debug messages, but this plugin allows us to use lambdas that generate log messages
        // (mainly using string interpolation plugin) and these lambdas are evaluated only when needed
        // (i.e. when the given log level is active)
        compile(group: 'kr.pe.kwonnam.slf4j-lambda', name: 'slf4j-lambda-core', version: slf4jLambdaApiVersion)  {
          exclude(group: 'org.slf4j')
        }
      }
    }

    slf4jTestImpl = { ->
      // We only need to provide an SLF4J implementation in the contexts which depend on JGit but don't depend on IntelliJ.
      // In our case, that's solely the tests of backendImpl.
      // In other contexts that require an SLF4J implementation (buildPlugin, runIde, possible but not yet present tests of frontend),
      // an SLF4J implementation is pulled in by IntelliJ.
      // Note that we don't need to agree the SLF4J implementation version here with JGit's slf4j-api version
      // since the latter is excluded (see the comment to `jgit` for more nuances).
      // The below dependency provides both slf4j-api and an implementation, both already in the same version (1.7.30 i.e. the current stable).
      dependencies {
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
      }
    }

    vavr = { ->
      dependencies {
        // Unlike any other current dependency, Vavr classes are very likely to end up in binary interface of the depending subproject,
        // hence it's better to just treat Vavr as an `api` and not `implementation` dependency by default.
        api group: 'io.vavr', name: 'vavr', version: vavrVersion
      }
    }
  }
}


// Root project config

// This is necessary to make sure that `buildPlugin` task puts jars of all subprojects into the final zip.
subprojects.each { subproject ->
  dependencies {
    implementation(subproject)
  }
}

apply plugin: 'org.jetbrains.intellij'

intellij {
  pluginName 'git-machete-intellij-plugin'
  version intellijVersion
}

patchPluginXml {
  // The following places must also be updated when updating the build range below:
  // * `intellij_versions` in scripts/verify-binary-compatibility
  // * range of tested versions in uiTests/src/test/scala/com/virtuslab/gitmachete/uitest/OpenTabActionUiTest.scala

  // Note that:
  // * typically `untilBuild` is the build number corresponding to `allprojects.ext.intellijVersion`
  // * `sinceBuild` changes independently of `intellijVersion`.

  // `sinceBuild` is exclusive when we are using `*` in version but inclusive when without `*`
  // In `untilBuild` situation is inverted: it's inclusive when using `*` but exclusive when without `*`
  sinceBuild '193' // aka 2019.3 (inclusive)
  untilBuild '201.*' // aka 2020.1.* (inclusive)
}

publishPlugin {
  token System.getenv('JETBRAINS_MARKETPLACE_TOKEN')
}

runIde {
  jvmArgs '-Djdk.gtk.version=2'
}

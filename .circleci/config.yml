version: 2.1

executors:
  docker_executor:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:9.1.0'
    working_directory: ~/git-machete-intellij-plugin
    resource_class: large

commands:
  reconfigure_origin_remote:
    steps:
      - run:
          name: Reconfigure origin remote to https
          # language=sh
          command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
  create_pull_request_if_files_changed:
    parameters:
      branch_name_prefix:
        type: string
      branch_name_command:
        type: string
      commit_message_prefix:
        type: string
      commit_message_command:
        type: string
        default: 'echo ""'
      labels:  # comma-separated
        type: string
    steps:
      - run:
          name: Create a pull request if project files changed
          # language=sh
          command: |
            if git diff --quiet HEAD; then
              echo "No changes to project files after running the task, aborting"
              exit 0
            fi

            branch_name="<<parameters.branch_name_prefix>>/$(<<parameters.branch_name_command>>)"
            if git ls-remote --exit-code --heads origin "$branch_name" &> /dev/null; then
              git restore .  # so that the uncommitted changes don't propagate to the next step.
              echo "Branch $branch_name already exists in the remote, aborting"
              exit 0
            fi

            git checkout -b "$branch_name"
            git commit -a -m "<<parameters.commit_message_prefix>> $(<<parameters.commit_message_command>>)"
            git push origin "$branch_name"
            gh pr create -f \
              --base "$CIRCLE_BRANCH" \
              --label "<<parameters.labels>>"
            git checkout "$CIRCLE_BRANCH"

jobs:
  build:
    executor: docker_executor
    steps:
      - checkout
      - run:
          name: Run pre-build checks
          command: ./scripts/run-pre-build-checks
      - restore_cache:
          # Adding `-v<N>` suffix to enable easy cache invalidation when needed:
          # just change to `-v<N+1>` (remember to also update `save_cache` key).
          keys:
            # First, try finding a cache entry with the same set of libraries
            # that also comes from the same branch (so as to make the best use of Gradle compilation cache).
            - gradle-deps-v5-{{ checksum "gradle/libs.versions.toml" }}-{{ .Branch }}
            # If the above key is not found, try finding a cache entry with the same set of libraries
            # coming from another branch (Gradle compilation cache might then be less useful).
            - gradle-deps-v5-{{ checksum "gradle/libs.versions.toml" }}-
            # As a last resort, take any available cache entry.
            - gradle-deps-v5-
      - run:
          name: Start Gradle daemon
          command: ./gradlew

      - run:
          name: Check formatting
          command: ./gradlew spotlessCheck
      - run:
          name: Compile production code
          # Given the RAM limits on CI (8GB), max-workers=7 cause OOMs.
          # Having 5 or 6 workers doesn't seem to decrease compilation time significantly, as compared to just 4.
          command: ./gradlew --max-workers=4 compileJava compileKotlin
      - run:
          name: Run post-compile checks
          command: ./scripts/verify-no-string-interpolation-leftovers
      - run:
          name: Run static code analyzer
          command: ./gradlew --warn checkstyleMain checkstyleTestFixtures
      - run:
          name: Check Javadoc correctness
          command: ./gradlew --max-workers=4 javadoc

      - when:
          condition:
            matches:
              pattern: "^(.*ide(-)?probe.*)$"
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: Install sbt
                # language=sh
                command: |
                  apt update
                  apt-get install apt-transport-https gnupg -yqq
                  echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | tee /etc/apt/sources.list.d/sbt.list
                  echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee /etc/apt/sources.list.d/sbt_old.list
                  curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
                  chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
                  apt-get update
                  apt-get install sbt
            - run:
                name: Publish ide-probe snapshots locally
                # language=sh
                command: |
                  cd ..
                  # Let's use the latest `master` commit by default. Note that ide-probe has no `develop` branch,
                  # hence `master` serves as a "logical develop" where all PRs are merged and wait to be included in a release.
                  git clone https://github.com/VirtusLab/ide-probe.git -b master
                  cd ide-probe/
                  sbt api_2_13/publishM2 driver_2_13/publishM2 junit-driver_2_13/publishM2 robot-driver_2_13/publishM2 probe-plugin_2_13/publishM2

      - run:
          name: Compile tests
          command: ./gradlew compileTestJava compileUiTestScala
      - run:
          name: Run unit & integration tests
          command: ./gradlew test

      - run:
          name: Build plugin artifact
          command: ./gradlew buildPlugin
      - run:
          name: Sign plugin artifact
          command: ./gradlew signPlugin
      - store_artifacts:
          path: build/distributions/
          destination: .
      - run:
          name: Verify plugin artifact contents
          command: ./scripts/verify-artifact-contents
      - run:
          name: Verify binary compatibility with supported IntelliJ versions
          command: ./gradlew runPluginVerifier

      - run:
          name: Run UI tests against an EAP of the latest supported major IntelliJ version (if applicable)
          command: ./gradlew -PvirtualDisplay -Pagainst=eapOfLatestSupportedMajor uiTest
      - run:
          name: Run UI tests against the latest stable IntelliJ version
          command: ./gradlew -PvirtualDisplay -Pagainst=latestStable uiTest
      - when:
          condition:
            # Practice shows that the risk of UI tests failing on `latestMinorsOfOldSupportedMajors`
            # once both binary compatibility checks and UI tests for latest versions passed is close to zero.
            # Hence, to speed up the builds, we only run them for develop/master/hotfix/release branches and not on PRs.
            # Also, we run on branches related to ide-probe or UI tests, as indicated by their name.
            matches:
              pattern: "^(develop|hotfix/.+|.*ide(-)?probe.*|master|release/.+|.*ui(-)?test.*)$"
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: Run UI tests against earlier supported major IntelliJ versions
                command: ./gradlew -PvirtualDisplay -Pagainst=latestMinorsOfOldSupportedMajors uiTest
      - run:
          name: Collect artifacts when an exception occurs
          # language=sh
          command: |
            if ! ( [ -d ~/.ideprobe-uitests/artifacts ] && [ -n "$(ls -A ~/.ideprobe-uitests/artifacts)" ] ); then exit 0; fi
            for f in $(ls -d ~/.ideprobe-uitests/artifacts/*/) ; do cd  $f ; zip -r "../$(basename ${f}).zip" . ; done
            mkdir -p ~/artifacts
            find ~/.ideprobe-uitests/artifacts -name '*.zip' | xargs cp --target-directory ~/artifacts
            for f in $(find ~/.ideprobe-uitests/idea-logs/intellij-instance-*/logs/idea.log) ; do
              target="~/artifacts/$(echo $f | sed 's/.*\/\(intellij-instance-.*\)\/logs\/idea.log/\1.log/')"
              eval "cp $f $target"
            done
          when: on_fail
      - store_artifacts:
          path: ~/artifacts
          destination: .

      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayout/impl/build/test-results/test/
      - store_test_results:
          path: backend/impl/build/test-results/test/
      - store_test_results:
          path: frontend/base/build/test-results/test/
      - store_test_results:
          # This includes the test results of both "regular" tests and UI tests for the top-level project.
          path: build/test-results/

      - when:
          condition:
            not:
              equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Remove IntelliJ artifacts to reduce cache size
                # language=sh
                command: |
                  du -h -d1 ~/.gradle/caches/modules-2/files-2.1/ | sort -h
                  rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains/
                  rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea/
            - save_cache:
                paths: [ ~/.gradle/ ]
                key: gradle-deps-v5-{{ checksum "gradle/libs.versions.toml" }}-{{ .Branch }}

      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                # Publishing should be the first step since if it fails, we should NOT proceed with opening backport PR/GitHub release, etc.
                name: Publish plugin to Jetbrains Marketplace
                command: ./gradlew publishPlugin
            - reconfigure_origin_remote
            - run:
                name: Push git tag
                # language=sh
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  git tag "$tag"
                  git push origin "$tag"
            - run:
                name: Create GitHub release
                # Implicit usage of ${GITHUB_TOKEN} by gh
                # language=sh
                command: |
                  source scripts/utils.sh
                  corresponding_milestone_title=v$(extract_version_from_current_wd)
                  tag=$corresponding_milestone_title
                  change_notes=$(./gradlew getChangelog --no-header -q)
                  gh release create \
                    $tag \
                    "$(./gradlew -q printPluginZipPath)" \
                    --title "$tag" \
                    --notes "$change_notes"
                  scripts/close-milestone $corresponding_milestone_title

  checkForUpdates:
    executor: docker_executor
    steps:
      - checkout
      - run:
          name: Configure git user information
          # language=sh
          command: |
            git config user.email "gitmachete@virtuslab.com"
            git config user.name "Git Machete Bot"
      - reconfigure_origin_remote

      - run:
          name: Check for updates of IntelliJ versions
          command: ./gradlew updateIntellijVersions
      - create_pull_request_if_files_changed:
          branch_name_prefix: update-intellij-versions
          branch_name_command: md5sum intellij-versions.properties | cut -d' ' -f 1
          commit_message_prefix: 'Update IntelliJ versions:'
          # language=sh
          commit_message_command: >
            git diff | grep '^+[^#+]' |
            sed 's/Majors=.*/Majors/' |
            sed 's/+//g' |
            sed 's/=/ to /g' |
            sed 's/to $/to EMPTY/g' |
            tr '\n' ',' |
            sed 's/,$//' |
            sed 's/,/, /g'
          labels: intellij-support

      - run:
          name: Check for updates of libraries & Gradle plugins
          # language=sh
          command: |
            ./gradlew versionCatalogUpdate
            cd buildSrc/
            ../gradlew versionCatalogUpdate
      - create_pull_request_if_files_changed:
          branch_name_prefix: update-deps
          branch_name_command: md5sum gradle/libs.versions.toml | cut -d' ' -f 1
          commit_message_prefix: Update dependencies
          labels: build

      - run:
          name: Check for updates of Gradle
          # language=sh
          command: |
            latest_gradle_version=$(curl -fsSL https://services.gradle.org/versions/current | jq -r .version)
            ./gradlew wrapper --gradle-version=$latest_gradle_version  # this only updates gradle-wrapper.properties
            ./gradlew  # to actually pull the new wrapper script/jar
            echo "$latest_gradle_version" > /tmp/gradle-version
      - create_pull_request_if_files_changed:
          branch_name_prefix: update-gradle
          branch_name_command: cat /tmp/gradle-version
          commit_message_prefix: Update Gradle wrapper to
          commit_message_command: cat /tmp/gradle-version
          labels: build

workflows:
  version: 2
  build:
    jobs:
      - build
  checkForUpdates:
    triggers:
      - schedule:
          cron: "0 0 * * *"  # everyday at midnight UTC
          filters:
            branches:
              only:
                - develop
    jobs:
      - checkForUpdates

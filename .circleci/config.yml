version: 2.1
commands:
  reconfigure_origin_remote:
    steps:
      - run:
          name: Reconfigure origin remote to https
          # language=sh
          command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
executors:
  docker_executor:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:6.2.0'
    working_directory: ~/git-machete-intellij-plugin
    resource_class: large


jobs:
  build:
    executor: docker_executor
    steps:
      - checkout
      - run:
          name: Install sbt
          # language=sh
          command: |
            apt update
            apt-get install apt-transport-https gnupg -yqq
            echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | tee /etc/apt/sources.list.d/sbt.list
            echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee /etc/apt/sources.list.d/sbt_old.list
            curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
            chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
            apt-get update
            apt-get install sbt
      - run:
          name: Run pre-build checks
          command: ./scripts/run-pre-build-checks
      - restore_cache:
          # Adding `-v<N>` suffix to enable easy cache invalidation when needed:
          # just change to `-v<N+1>` (remember to also update `save_cache` key).
          keys:
            # First, try finding a cache entry with the same set of libraries
            # that also comes from the same branch (so as to make the best use of Gradle compilation cache).
            - gradle-deps-v5-{{ checksum "gradle/libs.versions.toml" }}-{{ .Branch }}
            # If the above key is not found, try finding a cache entry with the same set of libraries
            # coming from another branch (Gradle compilation cache might then be less useful).
            - gradle-deps-v5-{{ checksum "gradle/libs.versions.toml" }}-
            # As a last resort, take any available cache entry.
            - gradle-deps-v5-
      - run:
          name: Start Gradle daemon
          command: ./gradlew

#      - run:
#          name: Check formatting
#          command: ./gradlew spotlessCheck
#      - run:
#          name: Compile production code
#          # Given the RAM limits on CI (8GB), max-workers=7 cause OOMs.
#          # Having 5 or 6 workers doesn't seem to increase compilation time significantly, as compared to just 4.
#          command: ./gradlew --max-workers=4 compileJava compileKotlin
#      - run:
#          name: Run post-compile checks
#          command: ./scripts/verify-no-string-interpolation-leftovers
#      - run:
#          name: Run static code analyzer
#          command: ./gradlew --warn checkstyleMain
#      - run:
#          name: Check Javadoc correctness
#          command: ./gradlew --max-workers=4 javadoc
#
#      - run:
#          name: Compile tests
#          command: ./gradlew compileTestJava compileUiTestScala
#      - run:
#          name: Run unit & integration tests
#          command: ./gradlew test
#
#      - run:
#          name: Build plugin artifact
#          command: ./gradlew buildPlugin
#      - store_artifacts:
#          path: build/distributions/
#          destination: .
#      - run:
#          name: Verify plugin artifact contents
#          command: ./scripts/verify-artifact-contents
#      - run:
#          name: Verify binary compatibility with supported IntelliJ versions
#          command: ./gradlew runPluginVerifier

      - run:
          name: Build ide-probe fork
          # language=sh
          command: |
            cd ..
            git clone https://github.com/azdrojowa123/ide-probe.git -b fix/jbr_installation_directory
            cd ide-probe/
            sbt api_2_13/publishM2 driver_2_13/publishM2 junit-driver_2_13/publishM2 robot-driver_2_13/publishM2 probe-plugin_2_13/publishM2
      - run:
          name: Run UI tests against an EAP of the latest supported major IntelliJ version (if applicable)
          command: ./gradlew -Pheadless -Pagainst=eapOfLatestSupportedMajor uiTest
      - run:
          name: Run UI tests against the latest stable IntelliJ version
          command: ./gradlew -Pheadless -Pagainst=latestStable uiTest
      - when:
          condition:
            # Practice shows that the risk of UI tests failing on `latestMinorsOfOldSupportedMajors`
            # once both binary compatibility checks and UI tests for latest versions passed is close to zero.
            # Hence, to speed up the builds, we only run them for develop/master/hotfix/release and not on PRs.
            matches:
              pattern: "^(develop|hotfix/.+|master|release/.+)$"
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: Run UI tests against earlier supported major IntelliJ versions
                command: ./gradlew -Pheadless -Pagainst=latestMinorsOfOldSupportedMajors uiTest
      - run:
          name: Collect artifacts when an exception occurs
          # language=sh
          command: |
            for f in $(ls -d ~/artifacts/*/) ; do cd  $f ; zip -r "../$(basename ${f}).zip" . ; done
            mkdir -p ~/artifacts/zip
            find ~/artifacts -name '*.zip' | xargs cp --target-directory ~/artifacts/zip
          when: on_fail
      - store_artifacts:
          path: ~/artifacts/zip
          destination: .

      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayout/impl/build/test-results/test/
      - store_test_results:
          path: backend/impl/build/test-results/test/
      - store_test_results:
          path: frontend/base/build/test-results/test/
      - store_test_results:
          # This include the test results of both "regular" tests and UI tests for the top-level project.
          path: build/test-results/

      - when:
          condition:
            not:
              equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Remove IntelliJ artifacts to reduce cache size
                # language=sh
                command: |
                  du -h -d1 ~/.gradle/caches/modules-2/files-2.1/ | sort -h
                  rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains/
                  rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea/
            - save_cache:
                paths: [ ~/.gradle/ ]
                key: gradle-deps-v5-{{ checksum "gradle/libs.versions.toml" }}-{{ .Branch }}

      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                # Publishing should be the first step since if it fails, we should NOT proceed with opening backport PR/GitHub release, etc.
                name: Publish plugin to Jetbrains Marketplace
                command: ./gradlew publishPlugin
            - reconfigure_origin_remote
            - run:
                name: Push git tag
                # language=sh
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  git tag "$tag"
                  git push origin "$tag"
            - run:
                name: Create GitHub release
                # Implicit usage of ${GITHUB_TOKEN} by hub
                # language=sh
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  # Newlines (<br/>) are necessary for better layout on Marketplace, but make the formatting worse on GitHub
                  change_notes=$(sed '/^<br.>$/d' CHANGE-NOTES.html)
                  hub release create \
                    --attach build/distributions/git-machete-intellij-plugin-*.zip \
                    --message "$tag"$'\n\n'"$change_notes" \
                    $tag


  updateEapBuildNumber:
    executor: docker_executor
    steps:
      - checkout
      - run:
          name: Configure git user information
          # language=sh
          command: |
            git config user.email "gitmachete@virtuslab.com"
            git config user.name "Git Machete Bot"
      - reconfigure_origin_remote
      - run:
          name: Check if new eap build number has appeared
          # language=sh
          command: |
            if ! ./gradlew updateEapBuildNumber --exit-code ; then exit 0; fi
            newEapBuildNumber=$(grep -Po '(?<=eapOfLatestSupportedMajor=).*' intellijVersions.properties)
            branch_name=update-eap/$newEapBuildNumber
            if git ls-remote --exit-code --heads origin $branch_name &> /dev/null ; then exit 0; fi
            git checkout -b "$branch_name"
            git add intellijVersions.properties
            git commit -m "Update EAP build number to $newEapBuildNumber"
            git push origin "$branch_name"
            hub pull-request \
              --no-edit \
              --base=develop \
              --labels=intellij-support


workflows:
  version: 2
  build:
    jobs:
      - build
  updateEapBuildNumber:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - updateEapBuildNumber

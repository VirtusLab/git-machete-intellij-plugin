version: 2.1
jobs:
  build:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:6.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - checkout
      - run:
          name: Run pre-compile checks
          command: ./scripts/run-pre-build-checks
      - restore_cache:
          # Adding `-v4` suffix to enable easy cache invalidation when needed (just change to `-v<next-integer>`)
          keys:
            # First, try finding a cache entry with the same set of libraries
            # that also comes from the same branch (so as to make the best use of Gradle compilation cache).
            - gradle-deps-v4-{{ checksum "build.gradle" }}-{{ .Branch }}
            # If the above key is not found, try finding a cache entry with the same set of libraries
            # coming from another branch (Gradle compilation cache might then be less useful).
            - gradle-deps-v4-{{ checksum "build.gradle" }}-
            # As a last resort, take any available cache entry.
            - gradle-deps-v4-
      - run:
          name: Start Gradle daemon
          command: ./gradlew

      - run:
          name: Validate Markdown files
          command: |
            set -x
            ./scripts/validate-markdown-links
            ./scripts/validate-markdown-values
      - run:
          name: Check formatting
          command: ./gradlew spotlessCheck
      - run:
          name: Compile production code
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: ./gradlew --max-workers=2 compileJava compileKotlin
      - run:
          name: Run post-compile checks
          command: ./scripts/verify-no-string-interpolation-leftovers
      - run:
          name: Run static code analyzer
          command: ./gradlew --warn checkstyleMain
      - run:
          name: Check Javadoc correctness
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: ./gradlew --max-workers=2 javadoc

      - run:
          name: Compile tests
          command: ./gradlew compileTestJava compileUiTestScala
      - run:
          name: Install git-machete CLI
          # Let's install the *first* of the comma-separated versions -
          # some of the later versions might not have been released yet and are only useful for the local development.
          command: |
            cli_version=$(grep -Po '(?<=referenceCliVersions=)[^,]*' backendImpl/src/test/resources/reference-cli-version.properties)
            pip3 install git-machete==$cli_version
            ln -s python3 /usr/bin/python
      - run:
          name: Run unit & integration tests
          command: ./gradlew test
      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayoutImpl/build/test-results/test/
      - store_test_results:
          path: backendImpl/build/test-results/test/
      - store_test_results:
          path: build/test-results/test/

      - run:
          name: Build plugin artifact
          command: ./gradlew buildPlugin
      - store_artifacts:
          path: build/distributions/
          destination: .
      - run:
          name: Verify plugin artifact contents
          command: ./scripts/verify-artifact-contents
      - run:
          name: Verify binary compatibility with supported IntelliJ versions
          command: ./gradlew runPluginVerifier

      - run:
          name: Run UI tests against an EAP of the latest supported major IntelliJ version (if applicable)
          command: ./gradlew -Pheadless -Pagainst=eapOfLatestSupportedMajor uiTest
      - run:
          name: Run UI tests against the latest stable IntelliJ version (our build target)
          command: ./gradlew -Pheadless -Pagainst=latestStable uiTest
      - when:
          condition:
            # Practice shows that the risk of UI tests failing on `latestMinorsOfOldSupportedMajors`
            # once both binary compatibility checks and UI tests for latest versions passed is close to zero.
            # Hence, to speed up the builds, we only run them for develop/master/hotfix/release and not on PRs.
            matches:
              pattern: "^(develop|hotfix/.+|master|release/.+)$"
              value: << pipeline.git.branch >>
          steps:
            - run:
                name: Run UI tests against earlier supported major IntelliJ versions
                command: ./gradlew -Pheadless -Pagainst=latestMinorsOfOldSupportedMajors uiTest
      - store_test_results:
          path: build/test-results/uiTest/

      - when:
          condition:
            not:
              equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Remove IntelliJ artifacts to reduce cache size
                command: |
                  du -h -d1 ~/.gradle/caches/modules-2/files-2.1/ | sort -h
                  rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains/
                  rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea/
            - save_cache:
                paths: [ ~/.gradle/ ]
                key: gradle-deps-v4-{{ checksum "build.gradle" }}-{{ .Branch }}

      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - deploy:
                # Publishing should be the first step since if it fails, we should NOT proceed with opening backport PR/GitHub release, etc.
                name: Publish plugin to Jetbrains Marketplace
                command: ./gradlew publishPlugin
            - deploy:
                # It was hard to make `git push`/`hub pull-request` to work with SSH repo access in CI.
                name: Reconfigure origin remote to https
                command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
            - deploy:
                name: Push git tag
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  git tag "$tag"
                  git push origin "$tag"
            - deploy:
                name: Create GitHub release
                # Implicit usage of ${GITHUB_TOKEN} by hub
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  # Newlines (<br/>) are necessary for better layout on Marketplace, but make the formatting worse on GitHub
                  change_notes=$(sed '/^<br.>$/d' CHANGE-NOTES.html)
                  hub release create \
                    --attach build/distributions/git-machete-intellij-plugin-*.zip \
                    --message "$tag"$'\n\n'"$change_notes" \
                    $tag
            - deploy:
                name: Open backport PR to develop
                # Implicit usage of ${GITHUB_TOKEN} by hub
                command: |
                  source scripts/utils.sh
                  version=$(extract_version_from_current_wd)
                  branch=backport/v$version
                  git checkout -b "$branch"
                  git push origin "$branch"

                  pr_num=$(hub pr list --state=closed --head=release/v$version --format=%I%n | head -1)
                  milestone=$(hub pr show --format=%Mn "$pr_num")
                  reviewers=$(hub pr show --format=%rs "$pr_num" | tr -d ' ')
                  assignees=$(hub pr show --format=%as "$pr_num" | tr -d ' ')
                  hub pull-request \
                    --no-edit \
                    --base=develop \
                    --message="Backport release of v$version to develop" \
                    --labels=backport \
                    --assign="$assignees" \
                    --milestone="$milestone" \
                    --reviewer="$reviewers"

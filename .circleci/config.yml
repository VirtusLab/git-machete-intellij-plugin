version: 2.1
jobs:
  build:
    working_directory: ~/git-machete-intellij-plugin
    docker:
      - image: gitmachete/intellij-plugin-ci

    steps:
      - checkout
      - run:
          name: Run pre-compile checks
          command: bash -x ./scripts/run-pre-build-checks
      - run:
          name: Start Gradle daemon
          command: ./gradlew
      - run:
          name: Check formatting
          command: ./gradlew spotlessCheck
      - run:
          name: Compile production code without delombok
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: LOMBOK_PROVIDED_BY=regular-dependency ./gradlew --max-workers=2 compileJava
      - run:
          name: Run post-compile checks
          command: |
            ### Remove once Docker image is regenerated
            command -v strings || { apt-get update && apt-get install -y binutils; }
            ./scripts/verify-no-string-interpolation-leftovers
      - run:
          name: Check Javadoc correctness
          command: ./gradlew javadoc
      - run:
          name: Run static code analyzer
          command: ./gradlew --warn checkstyleMain

      - run:
          name: Compile backend tests
          command: ./gradlew compileTestJava
      - run:
          name: Run backend tests
          command: ./gradlew test
      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayoutImpl/build/test-results/
      - store_test_results:
          path: backendImpl/build/test-results/

      - run:
          name: Build plugin artifact
          command: ./gradlew buildPlugin
      - store_artifacts:
          path: build/distributions/
          destination: .
      - run:
          name: Verify plugin artifact contents
          command: ./scripts/verify-artifact-contents
      - run:
          name: Verify binary compatibility with supported IntelliJ versions
          command: ./scripts/verify-binary-compatibility

      - run:
          # TODO (#274): use artifacts published on Bintray/JCenter instead
          # Note: this step (at least building&publishing the ide-probe artifacts) can't be baked into the Docker image
          # since the VirtuslabRnD/ide-probe is a private repository as for now,
          # and also we can't publish the binary artifacts due to VL's client's policies.
          name: Prepare prerequisites for UI tests
          command: |
            set -x
            apt-get update
            apt-get install -y gnupg
            echo "deb https://dl.bintray.com/sbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list
            # keyserver.ubuntu.com is exceptionally flaky, let's keep the public key in the repo instead of downloading
            # from https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823
            apt-key add < sbt-debian.pub
            apt-get update
            apt-get install -y sbt
            git clone https://${GITHUB_TOKEN}@github.com/VirtuslabRnD/ide-probe.git ~/ide-probe
            cd ~/ide-probe/
            git checkout 674acde5e17d9479733dd55faf880ea162248e37  # master as of 2020-05-14
            # Actually, all the commands up to this point take ~30 seconds;
            # it's sbt invocation itself that's the most time-consuming.
            sbt '; api/publishM2; probePlugin/publishM2; driver/publishM2; junitDriver/publishM2'
      - run:
          name: Compile UI tests
          command: ./gradlew -PenableUiTests :uiTests:compileTestScala
      - run:
          name: Run UI tests
          command: |
            # To be removed once Docker CI image is regenerated
            command -v xauth || {
              apt-get update && apt-get install -y xauth
            }

            # stop, max-workers, jvmargs: limit Gradle's memory consumption so that enough space is left for IntelliJ
            # enableUiTests: see uiTests/build.gradle
            # debug: let's leave it for some time until we're sure that these tests are reliable
            ./gradlew --stop
            ./gradlew -PenableUiTests --debug --max-workers=1 -Dorg.gradle.jvmargs=-Xmx256M :uiTests:test
      - store_test_results:
          path: uiTests/build/test-results/

      - persist_to_workspace:
          root: .
          paths: ['*']

      - run:
          # See Lombok config in build.gradle for why this step is necessary.
          # We're running this at the very end so that the recompiled code doesn't end up in the plugin artifact.
          name: Recompile production code with delombok
          # Apparently we need to kill the already-running daemons first, otherwise we might get an OOM.
          # New daemons will be spawned anyway since passing `LOMBOK_PROVIDED_BY=gradle-plugin` changes Gradle configuration.
          command: |
            ./gradlew --stop
            LOMBOK_PROVIDED_BY=gradle-plugin ./gradlew --max-workers=2 compileJava

  publish:
    working_directory: ~/git-machete-intellij-plugin
    docker:
      - image: gitmachete/intellij-plugin-ci
    steps:
      # No checkout, just attaching the workspace from the build job.
      - attach_workspace:
          at: .
      - run:
          # It was hard to make `git push`/`hub pull-request` to work with SSH repo access in CI.
          name: Reconfigure origin remote to https
          command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
      - deploy:
          name: Push git tag
          command: |
            source scripts/utils.sh
            tag=v$(extract_version_from_current_wd)
            git tag "$tag"
            git push origin "$tag"
      - deploy:
          name: Open backport-to-develop PR
          command: |
            source scripts/utils.sh
            version=$(extract_version_from_current_wd)
            branch=backport/$version
            git checkout -b "$branch"
            git push origin "$branch"
            hub pull-request \
              --no-edit \
              --base=develop \
              --message="Backport release of v$version to develop" \
              --labels=backport
      - deploy:
          name: Publish plugin to Jetbrains Marketplace
          command: ./gradlew publishPlugin


workflows:
  version: 2
  workflow:
    jobs:
      - build
      - hold: # A job that will require manual approval in the CircleCI web application.
          type: approval
          requires: [build]
          filters:
            branches:
              only: master
      - publish:
          requires: [hold]
          filters:
            branches:
              only: master

version: 2.1
jobs:
  build:
    working_directory: ~/git-machete-intellij-plugin
    docker:
      - image: gitmachete/intellij-plugin-ci

    steps:
      - checkout
      - run:
          name: Run pre-build checks
          command: |
            # Remove once `xml-twig-tools` package is baked into the Docker image
            command -v xml_grep || {
              apt-get update && apt-get install -y --no-install-recommends xml-twig-tools
            }

            bash -x ./scripts/run-pre-build-checks
      - run:
          name: Start gradle daemon
          command: ./gradlew
      - run:
          name: Check formatting
          command: ./gradlew spotlessCheck
      - run:
          name: Compile production code without delombok
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: LOMBOK_PROVIDED_BY=regular-dependency ./gradlew --max-workers=2 compileJava
      - run:
          name: Check Javadoc correctness
          command: ./gradlew javadoc
      - run:
          name: Run static code analyzer
          command: ./gradlew --warn checkstyleMain

      - run:
          name: Compile tests
          command: ./gradlew compileTestJava
      - run:
          name: Run tests
          command: ./gradlew test
      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayoutImpl/build/test-results/
      - store_test_results:
          path: backendImpl/build/test-results/

      - run:
          name: Build plugin artifact
          command: ./gradlew buildPlugin
      - run:
          name: Verify plugin artifact contents
          command: ./scripts/verify-artifact-contents
      - run:
          name: Verify binary compatibility with supported IntelliJ versions
          command: ./scripts/verify-binary-compatibility
      - store_artifacts:
          path: build/distributions/
          destination: .
      - persist_to_workspace:
          root: .
          paths: ['*']
      - run:
          # See Lombok config in build.gradle for why this step is necessary.
          # We're running this at the very end so that the recompiled code doesn't end up in the plugin artifact.
          name: Recompile production code with delombok
          # Apparently we need to kill the already-running daemons first, otherwise we might get an OOM.
          # New daemons will be spawned anyway since passing `LOMBOK_PROVIDED_BY=gradle-plugin` changes Gradle configuration.
          command: |
            ./gradlew --stop
            LOMBOK_PROVIDED_BY=gradle-plugin ./gradlew --max-workers=2 compileJava

  publish:
    working_directory: ~/git-machete-intellij-plugin
    docker:
      - image: gitmachete/intellij-plugin-ci
    steps:
      # No checkout, just attaching the workspace from the build job.
      - attach_workspace:
          at: .
      - run:
          # It was hard to make `git push`/`hub pull-request` to work with SSH repo access in CI.
          name: Reconfigure origin remote to https
          command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
#      - deploy:
#          name: Push git tag
#          command: |
#            source scripts/utils.sh
#            tag=v$(extract_version_from_current_wd)
#            git tag "$tag"
#            git push origin "$tag"
      - deploy:
          name: Open backport-to-develop PR
          command: |
            source scripts/utils.sh
            version=$(extract_version_from_current_wd)
            branch=backport/$version
            git checkout -b "$branch"
            git push origin "$branch"
            hub pull-request \
              --no-edit \
              --base=develop \
              --message="Backport release of v$version to develop" \
              --labels=backport
#      - deploy:
#          name: Publish plugin to Jetbrains Marketplace
#          command: ./gradlew publishPlugin


workflows:
  version: 2
  workflow:
    jobs:
      - build
      - hold: # A job that will require manual approval in the CircleCI web application.
          type: approval
          requires: [build]
          filters:
            branches:
              only: chore/backports # master
      - publish:
          requires: [hold]
          filters:
            branches:
              only: chore/backports # master

#!/usr/bin/env bash

set -e -o pipefail -u

self_dir=$(cd "$(dirname "$0")" &>/dev/null; pwd -P)
source "$self_dir"/utils.sh

if [[ ${CI_PULL_REQUEST-} ]]; then
  # In case of a PR build, CI_PULL_REQUEST should be a link of the form https://github.com/VirtusLab/git-machete-intellij-plugin/pull/123
  pr_num=${CI_PULL_REQUEST##*/}
  base_branch=$(hub pr show --format=%B "$pr_num")
  git fetch --quiet origin "$base_branch"
  base_revision="origin/$base_branch"

elif [[ ${CIRCLE_BRANCH-} == master ]]; then
  # Master build on CI, no version check needed.
  # Note: we don't run builds other than for PRs and for master branch (e.g. pre-PR branch builds).
  exit 0

elif git machete show up &>/dev/null; then
  # A local run.
  base_revision=$(git machete show up 2>/dev/null)

elif command -v hub &>/dev/null; then
  # A local run. Fall back to master if no PR is open for the current branch.
  base_revision=$(hub pr show --format=%B 2>/dev/null || echo master)

else
  # A local run.
  base_revision=origin/master
fi


base_commit_short_hash=$(git rev-parse --short "$base_revision")
base_desc="$base_revision (commit $base_commit_short_hash)"

parse_version_from_current_wd head
parse_version_from_git_revision base "$base_commit_short_hash"

[[ $head_major -gt $base_major ]] && exit 0
[[ $head_major -eq $base_major ]] || \
  die "Major version $head_major must not be lower than $base_major in $base_desc"

[[ $head_minor -gt $base_minor ]] && exit 0
[[ $head_minor -eq $base_minor ]] || \
  die "Minor version $head_minor must not be lower than $base_minor in $base_desc"

[[ $head_patch -gt $base_patch ]] && exit 0
[[ $head_patch -eq $base_patch ]] || \
  die "Patch version $head_patch must not be lower than $base_patch in $base_desc"

# According to semver spec, a missing pre-release version is considered higher than any defined pre-release version (1.2.3 is higher than 1.2.3-rc999).
head_pre_release_cmp=${head_pre_release:-999999}
base_pre_release_cmp=${base_pre_release:-999999}
[[ $head_pre_release_cmp -gt $base_pre_release_cmp ]] && exit 0

if [[ $head_pre_release -eq $base_pre_release ]]; then
  die "Version must not be identical as in $base_desc"
elif ! [[ $base_pre_release ]]; then
  die "Unreleased version $head_version cannot follow a released version $base_version in $base_desc"
else
  die "Pre-release version $head_pre_release must not be lower than $base_pre_release in $base_desc"
fi

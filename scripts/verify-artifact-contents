#!/usr/bin/env bash

set -e -o pipefail -u

self_dir=$(cd "$(dirname "$0")" &>/dev/null; pwd -P)
source "$self_dir"/utils.sh

plugin_zip=$(./gradlew -q printPluginZipPath)

exit_code=0

function fail() {
  echo "$@"
  exit_code=1
}

jars_in_plugin_zip=$(zipinfo -1 "$plugin_zip" | grep -Po '(?<=git-machete-intellij-plugin/lib/).*\.jar' | sort)

gradle_projects=$(grep -Po '(?<=^  ").*(?=",)' settings.gradle.kts | sort)
for project in $gradle_projects; do
  project_path=${project//:/\/}
  project_jar_name=${project//:/-}
  if [[ -d ${project_path}/src/main ]]; then
    if ! grep -qx "${project_jar_name}.jar" <<< "$jars_in_plugin_zip"; then
      fail "${project_jar_name}.jar is expected but missing from $plugin_zip"
    fi
  else
    if grep -qx "${project_jar_name}.jar" <<< "$jars_in_plugin_zip"; then
      fail "${project_jar_name}.jar is present in $plugin_zip even though $project does not contain any production code (${project_path}/src/main not found)"
    fi
  fi
done

# Since Gradle Kotlin plugin 1.4.0, kotlin-stdlib is automatically packaged into the plugin zip
# (https://kotlinlang.org/docs/whatsnew14.html#dependency-on-the-standard-library-added-by-default),
# but kotlin-reflect needs to be added by us explicitly since it's required in the runtime.
expected_libraries=(org.eclipse.jgit reflections slf4j-lambda-core vavr vavr-match)
for lib in ${expected_libraries[@]}; do
  grep -qEx "${lib//./\\.}-[0-9.]+.*\.jar" <<< "$jars_in_plugin_zip" || fail "$lib jar is expected but missing from $plugin_zip"
done

# We don't want either slf4j-api or any SLF4J implementation jars in the final plugin artifact
# as this might lead to a linker error (for api) or an SLF4J error (for impl) in the runtime.
forbidden_library_prefixes=(checker ide-probe idea junit-driver kotlin lombok remote-robot scala slf4j)
for lib in ${forbidden_library_prefixes[@]}; do
  if matching_jars=$(grep "^$lib" <<< "$jars_in_plugin_zip"); then
    for jar in $matching_jars; do
      jar_base_name=${jar/-[0-9]*/}
      # Maybe the library matches the forbidden prefix but is still expected (e.g. slf4j-lambda-core)?
      if ! [[ " ${expected_libraries[@]} " == *\ $jar_base_name\ * ]]; then
        fail "$jar is forbidden but present in $plugin_zip"
      fi
    done
  fi
done

exit $exit_code

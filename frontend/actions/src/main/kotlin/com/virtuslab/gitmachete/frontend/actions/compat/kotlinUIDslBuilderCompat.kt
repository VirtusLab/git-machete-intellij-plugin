package com.virtuslab.gitmachete.frontend.actions.compat

import com.intellij.ui.dsl.builder.*
import javax.swing.JComponent
import javax.swing.JLabel
import kotlin.String

// TODO (#1312): remove this class, go back to direct calls of `buttonsGroup`, `comment` and `row`

// For a general background on why this entire hack is needed,
// see https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces.
// In one of 2022.3 EAPs, both `Cell` and `Panel` (interfaces from `com.intellij.ui.dsl.builder` package)
// have been annotated as `@kotlin.jvm.JvmDefaultWithCompatibility`.
//
// Let's now take `Panel#row` as an example on how that broke compatibility of IDEA against its plugins
// (made it hard to build a plugin against a new IDEA and use the plugin on an old IDEA).
//
// Before that EAP, default method `row$default` was NOT present in `Panel`.
// Hence, all calls to `Panel#row` were realized from Kotlin code via `Panel$DefaultImpls.row$default`.
//
// After that EAP, `Panel` interface gained a default `row$default` method.
// All calls to `Panel#row` are realized from Kotlin code via `Panel#row$default`... which is missing from 2022.1 and 2022.2.
//
// What we're doing here, is to call `Panel$DefaultImpls.row$default` explicitly, as it's present in all 2022.x versions.
// It's in particular present in 2022.3, thanks to the use of `@JvmDefaultWithCompatibility`
// and not `@JvmDefaultWithoutCompatibility` on the affected interfaces.

// Note that there's no way to get access to `...$DefaultImpls` classes without reflection in Kotlin.
// In Java `...$DefaultImpls` classes are visible, but since all their methods are marked as `ACC_SYNTHETIC` in classfile,
// they can't be called without reflection either.
private val cellDefaultImpls: Class<*> = Class.forName("com.intellij.ui.dsl.builder.Cell\$DefaultImpls")
private val panelDefaultImpls: Class<*> = Class.forName("com.intellij.ui.dsl.builder.Panel\$DefaultImpls")

// The first param of `java.lang.reflect.Method.invoke` is the receiver of the method.
// As the methods from `DefaultImpls` are static, no receiver is expected.
private val NULL_RECEIVER_FOR_STATIC_METHOD: Any? = null

// Default methods in interfaces that accept default params accept an extra bit flag as the penultimate param.
// As many lowest bits are relevant, as many default params there are, and for each such param:
// - 0, if the value for the default param has been explicitly provided,
// - 1, if the value for the default param has NOT been provided.
// Let's just pass a value with a lot of lower bits set to 1, as we always rely on default param values in the covered methods.
private val USE_DEFAULT_PARAMS_WHEREVER_AVAILABLE = 0xffff

// It's a bit unclear what exactly this param does.
// Apparently it's used to prevent relying on default params when calling the method as `super`.
// Anyway, from the generated bytecode it's clear that it's basically ignored when it's null.
private val FINAL_OBJECT_PARAM: Any? = null

fun <T : JComponent> Cell<T>.commentCompat(comment: String): Cell<T> {
  val method = cellDefaultImpls.getDeclaredMethod(
    "comment\$default",
    Cell::class.java, // receiver
    String::class.java, // actual arguments
    Int::class.javaPrimitiveType,
    HyperlinkEventAction::class.java,
    Int::class.javaPrimitiveType, // bookkeeping arguments
    Any::class.java
  )
  val result = method.invoke(
    NULL_RECEIVER_FOR_STATIC_METHOD,
    this,
    comment,
    /* maxLineLength */ 0,
    /* action */ null,
    USE_DEFAULT_PARAMS_WHEREVER_AVAILABLE,
    FINAL_OBJECT_PARAM
  )
  @Suppress("UNCHECKED_CAST")
  return result as Cell<T>
}

fun Panel.buttonsGroupCompat(init: Panel.() -> Unit): ButtonsGroup {
  val method = panelDefaultImpls.getDeclaredMethod(
    "buttonsGroup\$default",
    Panel::class.java, // receiver
    String::class.java, // actual arguments
    Boolean::class.javaPrimitiveType,
    Function1::class.java,
    Int::class.javaPrimitiveType, // bookkeeping arguments
    Any::class.java
  )
  val result = method.invoke(
    NULL_RECEIVER_FOR_STATIC_METHOD,
    this,
    /* title */ null,
    /* indent */ false,
    init,
    USE_DEFAULT_PARAMS_WHEREVER_AVAILABLE,
    FINAL_OBJECT_PARAM
  )
  return result as ButtonsGroup
}

fun Panel.rowCompat(init: Row.() -> Unit): Row {
  val method = panelDefaultImpls.getDeclaredMethod(
    "row\$default",
    Panel::class.java, // receiver
    JLabel::class.java, // actual arguments
    kotlin.jvm.functions.Function1::class.java,
    Int::class.javaPrimitiveType, // bookkeeping arguments
    Any::class.java
  )
  val result = method.invoke(
    NULL_RECEIVER_FOR_STATIC_METHOD,
    this,
    /* label */ null,
    init,
    USE_DEFAULT_PARAMS_WHEREVER_AVAILABLE,
    FINAL_OBJECT_PARAM
  )
  return result as Row
}
